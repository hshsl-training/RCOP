---
title: "R Community of Practice Week 1"
subtitle: "Importing Multiple Files"
title-block-banner: white
title-block-banner-color: black
format: 
  html:
    embed-resources: true
toc: true
editor: source
css: ../styles.css
---

## Introduction

In introductory R classes we learn how to import data by reading one file at a time. This week, we will "level up" our R skills by learning how to important multiple files at once. This can be especially useful when you have several files with a similar structure and want to be able to combine and analyze them together. To accomplish this goal, we'll be working with a new data structure called a list and learning how to iterate over that list.

## The Data

Our scenario this week is that we have a folder of registration data for workshops that we want to combine and analyze. We have a separate spreadsheet for each workshop with a list of attendees, their affiliations, and status. This data has been generated and does not contain any names or information of actual workshop participants, but is based on the structure of registration data we use here at UMB.

Let's load the packages we'll be working with today.

```{r}
#| message: FALSE
library(tidyverse)
library(fs)
```

## Review - Importing data

To import one csv file, we can use the function `read_csv()` from the `readr` package, part of the **`tidyverse`**. You can also use the Import Dataset widget in the RStudio GUI.

```{r}
#| message: FALSE

Workshop01 <- read_csv("data/Workshop_01.csv")

```

## The Power of Iteration

To read in multiple files, we could copy and paste that code a bunch of times with different names each time.

```{r}
#| message: FALSE

Workshop02 <- read_csv("data/Workshop_02.csv")

Workshop03 <- read_csv("data/Workshop_03.csv")

Workshop04 <- read_csv("data/Workshop_04.csv")
```

But! That's a really good way to make mistakes, and part of the benefit of learning to code is to avoid the need to repeat things. Most programming languages, including R, have ways of iterating, or repeating, an operation over multiple objects based on some instructions. Often this iteration takes place in some kind of loop operation, e.g.

```         
for (thing in list_of_things) {
  do_some_function()
}
```

These can be used in R, but it is more common to use one of several available R functions for this task.

We'll use a function called `map()` which takes as arguments a vector or list (`.x`) and a function (`.f`) we will use to iterate over the elements of that vector or list. So the syntax of this function is `map(.x, .f)`.

So, we have our function `read_csv()`, and now we want it to repeat for all the file names in our directory. So - how do we accomplish this?

1.  Create a vector of file names
2.  Use `map()` to run `read_csv()` on each file name.
3.  Combine files into one data frame.
4.  Summarize data frame

## Step 1: Create a vector of file names

First, you'll want to have all the files you need saved in the same directory. Then we can use the base R function `list.files()` on that directory. We'll save this an object so we can use this later.

```{r}
files <- list.files("data/", full.names = TRUE)

files
```

## Step 2: Iterate over file names

As mentioned before, now we have an object to stand in for the `.x` argument of `map()`

```{r}
#| message: FALSE

workshop_list <- map(files, read_csv)

```

## Step 3: Combine into one data frame

### Working with lists

After running our last step, the resulting object is in a structure called a list. In most beginning R workshops we work with two main data structures: vectors and data frames

|     | homogeneous | heterogenous |
|-----|-------------|--------------|
| 1d  | vector      | list         |
| 2d  | matrix      | data frame   |
| nd  | array       |              |

: R Data Structures

Lists are made up of elements like vectors, but those elements can be anything. Often we use lists to work with several data frames at one time.

### Adding names to lists

Each element of the list is given an index number. But it will be helpful to us to give the elements names. We do this with the `names()` function.

```{r}
names(workshop_list) #currently no names
```

Let's name each element the same as the file, this way when we combine the data, we can keep track of which rows came from which data frame. We'll use the **`fs`** package which contains tools for working with file names.

```{r}
path_file(files) # keeps only file part of path

path_ext_remove(files) #keeps just 

names(workshop_list) <-path_ext_remove(path_file(files))

names(workshop_list)
```

### Binding rows

We'll use the `bind_rows()` function from **`dplyr`** to paste each element in our list into one data frame. The .id argument will allow us to keep track of which row came from which original dataset. It uses the names of the list elements as values.

```{r}

all_workshops <- bind_rows(workshop_list, .id = "Workshop") %>% 
  arrange(attendees)



head(all_workshops)

```

## Step 4: Summarize the data

Now we can work with our data in the more familiar structure of a data frame. This allows us to do things like get a count of how many of each affiliation and status attended all workshops put together.

```{r}
all_workshops %>% 
  count(affiliation)

all_workshops %>% 
  count(status)

```

## Wrapping up

We might want to work with this data again later so let's be sure to save it. We can write it back out to a CSV file, or we can save it directly as an R object. Let's try both ways and save these to our `data_outputs` folder.

```{r}
workshop_breakdown <- 
  all_workshops %>% 
  count(affiliation, status)

saveRDS(all_workshops, "data_output/all_workshops.RDS")

saveRDS(workshop_breakdown, "data_output/workshop_breakdown.RDS")
```
