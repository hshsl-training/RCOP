[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "NNLM + CDABS R Community of Practice",
    "section": "",
    "text": "Objective:\nThe objective of this website is to provide supporting documentation for R Community of Practice. In the navigation bar you will find each week lesson.\nWeekly Topics\n\n\n\n\n\n\n\n\nWeek\nTopic\nSlides\n\n\n\n\nWeek 1\nReading multiple files\nWeek 1\n\n\nWeek 2\nWorking with Dates\nWeek 2\n\n\nWeek 3\nCreating a bar chart with ggplot2\nWeek 3\n\n\nWeek 4\nTransforming data from wide to long\nWeek 4\n\n\nWeek 5\nAccessing NCBI data with the Rentrez package\nWeek 5\n\n\nWeek 6\nCommunicating with Quarto\n\n\n\n\nDownload the data by week for all the lessons here."
  },
  {
    "objectID": "Week01/week01_lesson.html",
    "href": "Week01/week01_lesson.html",
    "title": "R Community of Practice Week 1",
    "section": "",
    "text": "In introductory R classes we learn how to import data by reading one file at a time. This week, we will “level up” our R skills by learning how to important multiple files at once. This can be especially useful when you have several files with a similar structure and want to be able to combine and analyze them together. To accomplish this goal, we’ll be working with a new data structure called a list and learning how to iterate over that list."
  },
  {
    "objectID": "Week01/week01_lesson.html#the-data",
    "href": "Week01/week01_lesson.html#the-data",
    "title": "R Community of Practice Week 1",
    "section": "The Data",
    "text": "The Data\nDownload the data for this lesson here.\nOur scenario this week is that we have a folder of registration data for workshops that we want to combine and analyze. We have a separate spreadsheet for each workshop with a list of attendees, their affiliations, and status. This data has been generated and does not contain any names or information of actual workshop participants, but is based on the structure of registration data we use here at UMB.\nLet’s load the packages we’ll be working with today.\n\nlibrary(tidyverse)\nlibrary(fs)"
  },
  {
    "objectID": "Week01/week01_lesson.html#review---importing-data",
    "href": "Week01/week01_lesson.html#review---importing-data",
    "title": "R Community of Practice Week 1",
    "section": "Review - Importing data",
    "text": "Review - Importing data\nTo import one csv file, we can use the function read_csv() from the readr package, part of the tidyverse. You can also use the Import Dataset widget in the RStudio GUI.\n\nWorkshop01 <- read_csv(\"data/Workshop_01.csv\")"
  },
  {
    "objectID": "Week01/week01_lesson.html#the-power-of-iteration",
    "href": "Week01/week01_lesson.html#the-power-of-iteration",
    "title": "R Community of Practice Week 1",
    "section": "The Power of Iteration",
    "text": "The Power of Iteration\nTo read in multiple files, we could copy and paste that code a bunch of times with different names each time.\n\nWorkshop02 <- read_csv(\"data/Workshop_02.csv\")\n\nWorkshop03 <- read_csv(\"data/Workshop_03.csv\")\n\nWorkshop04 <- read_csv(\"data/Workshop_04.csv\")\n\nBut! That’s a really good way to make mistakes, and part of the benefit of learning to code is to avoid the need to repeat things. Most programming languages, including R, have ways of iterating, or repeating, an operation over multiple objects based on some instructions. Often this iteration takes place in some kind of loop operation, e.g.\nfor (thing in list_of_things) {\n  do_some_function()\n}\nThese can be used in R, but it is more common to use one of several available R functions for this task.\nWe’ll use a function called map() which takes as arguments a vector or list (.x) and a function (.f) we will use to iterate over the elements of that vector or list. So the syntax of this function is map(.x, .f).\nSo, we have our function read_csv(), and now we want it to repeat for all the file names in our directory. So - how do we accomplish this?\n\nCreate a vector of file names\nUse map() to run read_csv() on each file name.\nCombine files into one data frame.\nSummarize data frame"
  },
  {
    "objectID": "Week01/week01_lesson.html#step-1-create-a-vector-of-file-names",
    "href": "Week01/week01_lesson.html#step-1-create-a-vector-of-file-names",
    "title": "R Community of Practice Week 1",
    "section": "Step 1: Create a vector of file names",
    "text": "Step 1: Create a vector of file names\nFirst, you’ll want to have all the files you need saved in the same directory. Then we can use the base R function list.files() on that directory. We’ll save this an object so we can use this later.\n\nfiles <- list.files(\"data/\", full.names = TRUE)\n\nfiles\n\n [1] \"data//Workshop_01.csv\" \"data//Workshop_02.csv\" \"data//Workshop_03.csv\"\n [4] \"data//Workshop_04.csv\" \"data//Workshop_05.csv\" \"data//Workshop_06.csv\"\n [7] \"data//Workshop_07.csv\" \"data//Workshop_08.csv\" \"data//Workshop_09.csv\"\n[10] \"data//Workshop_10.csv\""
  },
  {
    "objectID": "Week01/week01_lesson.html#step-2-iterate-over-file-names",
    "href": "Week01/week01_lesson.html#step-2-iterate-over-file-names",
    "title": "R Community of Practice Week 1",
    "section": "Step 2: Iterate over file names",
    "text": "Step 2: Iterate over file names\nAs mentioned before, now we have an object to stand in for the .x argument of map()\n\nworkshop_list <- map(files, read_csv)"
  },
  {
    "objectID": "Week01/week01_lesson.html#step-3-combine-into-one-data-frame",
    "href": "Week01/week01_lesson.html#step-3-combine-into-one-data-frame",
    "title": "R Community of Practice Week 1",
    "section": "Step 3: Combine into one data frame",
    "text": "Step 3: Combine into one data frame\n\nWorking with lists\nAfter running our last step, the resulting object is in a structure called a list. In most beginning R workshops we work with two main data structures: vectors and data frames\n\nR Data Structures\n\n\n\nhomogeneous\nheterogenous\n\n\n\n\n1d\nvector\nlist\n\n\n2d\nmatrix\ndata frame\n\n\nnd\narray\n\n\n\n\nLists are made up of elements like vectors, but those elements can be anything. Often we use lists to work with several data frames at one time.\n\n\nAdding names to lists\nEach element of the list is given an index number. But it will be helpful to us to give the elements names. We do this with the names() function.\n\nnames(workshop_list) #currently no names\n\nNULL\n\n\nLet’s name each element the same as the file, this way when we combine the data, we can keep track of which rows came from which data frame. We’ll use the fs package which contains tools for working with file names.\n\npath_file(files) # keeps only file part of path\n\n [1] \"Workshop_01.csv\" \"Workshop_02.csv\" \"Workshop_03.csv\" \"Workshop_04.csv\"\n [5] \"Workshop_05.csv\" \"Workshop_06.csv\" \"Workshop_07.csv\" \"Workshop_08.csv\"\n [9] \"Workshop_09.csv\" \"Workshop_10.csv\"\n\npath_ext_remove(files) #keeps just \n\n [1] \"data/Workshop_01\" \"data/Workshop_02\" \"data/Workshop_03\" \"data/Workshop_04\"\n [5] \"data/Workshop_05\" \"data/Workshop_06\" \"data/Workshop_07\" \"data/Workshop_08\"\n [9] \"data/Workshop_09\" \"data/Workshop_10\"\n\nnames(workshop_list) <-path_ext_remove(path_file(files))\n\nnames(workshop_list)\n\n [1] \"Workshop_01\" \"Workshop_02\" \"Workshop_03\" \"Workshop_04\" \"Workshop_05\"\n [6] \"Workshop_06\" \"Workshop_07\" \"Workshop_08\" \"Workshop_09\" \"Workshop_10\"\n\n\n\n\nBinding rows\nWe’ll use the bind_rows() function from dplyr to paste each element in our list into one data frame. The .id argument will allow us to keep track of which row came from which original dataset. It uses the names of the list elements as values.\n\nall_workshops <- bind_rows(workshop_list, .id = \"Workshop\") %>% \n  arrange(attendees)\n\n\n\nhead(all_workshops)\n\n# A tibble: 6 × 4\n  Workshop    attendees                affiliation status \n  <chr>       <chr>                    <chr>       <chr>  \n1 Workshop_06 Abdul Waahid al-Jaber    Nursing     Faculty\n2 Workshop_10 Addison Elkins           Graduate    Staff  \n3 Workshop_07 Adriana Picazo           Medicine    Staff  \n4 Workshop_05 Alexander Garcia-Marrufo Nursing     Faculty\n5 Workshop_09 Alexandra Willis         Social Work Staff  \n6 Workshop_06 Alexis Wright            Medicine    Faculty"
  },
  {
    "objectID": "Week01/week01_lesson.html#step-4-summarize-the-data",
    "href": "Week01/week01_lesson.html#step-4-summarize-the-data",
    "title": "R Community of Practice Week 1",
    "section": "Step 4: Summarize the data",
    "text": "Step 4: Summarize the data\nNow we can work with our data in the more familiar structure of a data frame. This allows us to do things like get a count of how many of each affiliation and status attended all workshops put together.\n\nall_workshops %>% \n  count(affiliation)\n\n# A tibble: 6 × 2\n  affiliation     n\n  <chr>       <int>\n1 Dentistry      21\n2 Graduate       25\n3 Medicine       30\n4 Nursing        35\n5 Pharmacy       31\n6 Social Work    31\n\nall_workshops %>% \n  count(status)\n\n# A tibble: 3 × 2\n  status      n\n  <chr>   <int>\n1 Faculty    62\n2 Staff      60\n3 Student    51"
  },
  {
    "objectID": "Week01/week01_lesson.html#wrapping-up",
    "href": "Week01/week01_lesson.html#wrapping-up",
    "title": "R Community of Practice Week 1",
    "section": "Wrapping up",
    "text": "Wrapping up\nWe might want to work with this data again later so let’s be sure to save it. We can write it back out to a CSV file, or we can save it directly as an R object. Let’s try both ways and save these to our data_outputs folder.\n\nworkshop_breakdown <- \n  all_workshops %>% \n  count(affiliation, status)\n\nsaveRDS(all_workshops, \"data_output/all_workshops.RDS\")\n\nsaveRDS(workshop_breakdown, \"data_output/workshop_breakdown.RDS\")"
  },
  {
    "objectID": "Week02/week02_lesson.html",
    "href": "Week02/week02_lesson.html",
    "title": "R Community of Practice Week 2",
    "section": "",
    "text": "Dates are a particular kind of numeric data type in R. Dates can be tricky to work for a couple of reasons. Often when you import data into R, it will interpret dates as strings, or character data type. This will make things difficult if you want to do calculations with dates, or parse out a part of a date. Second, time units are often variable, months have different numbers of days, there are leap years, and time zones can be another factor to consider. In this lesson, we’ll be introducing the lubridate package, which is part of the tidyverse, and makes working with dates much more manageable."
  },
  {
    "objectID": "Week02/week02_lesson.html#the-data",
    "href": "Week02/week02_lesson.html#the-data",
    "title": "R Community of Practice Week 2",
    "section": "The Data",
    "text": "The Data\nDownload the data for this lesson here.\nOur scenario this week is that we a spreadsheet of data tracking research consults from 2018 to 2023. We want to accomplish the following tasks:\n\nChange the date variable to date data type\nSummarize the number of consults by year\nSummarize consults by month for FY2022\n\nLet’s open a new script and load the libraries we’ll be working with in this lesson:\n\nlibrary(tidyverse)\n\nAnd now we can import our data set\n\nconsults <- read_csv(\"data/consults.csv\")"
  },
  {
    "objectID": "Week02/week02_lesson.html#step-1-changing-strings-to-dates",
    "href": "Week02/week02_lesson.html#step-1-changing-strings-to-dates",
    "title": "R Community of Practice Week 2",
    "section": "Step 1: Changing Strings to Dates",
    "text": "Step 1: Changing Strings to Dates\nHow do we know what kind of data our date variable is? We use the class() function to check data types\n\nclass(consults$date)\n\n[1] \"character\"\n\n\nLet’s change that to date data type. lubridate has a number of functions for parsing dates in different formats. The name of the function depends on the format of the input date.\nFor example, if we had a string with date in the month, day, year format, we would use the mdy() function.\n\nmyDate <- \"June 22, 2023\"\n\nmyRealDate <- mdy(myDate)\n\nclass(myDate)\n## [1] \"character\"\nclass(myRealDate)\n## [1] \"Date\"\n\nOr, as another example:\n\nmyDate <- \"22062023\"\nmyRealDate <- dmy(myDate)\n\nclass(myDate)\n## [1] \"character\"\nclass(myRealDate)\n## [1] \"Date\"\n\nand finally\n\nmyDate <- \"2023-06-22\"\nmyRealDate <- ymd(myDate)\n\nclass(myDate)\n## [1] \"character\"\nclass(myRealDate)\n## [1] \"Date\"\n\nNow that we have a better idea of how these functions work, we can use them to overwrite our original date column with one that is properly recognized as a date. We use the mutate() function from dplyr to create a new variable.\n\nconsults <- consults %>% \n  mutate(date = mdy(date))\n\nAnd let’s check if that worked\n\nclass(consults$date)\n\n[1] \"Date\""
  },
  {
    "objectID": "Week02/week02_lesson.html#step-2-summarize-data-by-month-and-year",
    "href": "Week02/week02_lesson.html#step-2-summarize-data-by-month-and-year",
    "title": "R Community of Practice Week 2",
    "section": "Step 2: Summarize data by month and year",
    "text": "Step 2: Summarize data by month and year\nAnother set of functions in lubridate help with extracting pieces of dates.\nFor example:\n\nyear(myRealDate)\n## [1] 2023\nmonth(myRealDate)\n## [1] 6\nday(myRealDate)\n## [1] 22\nwday(myRealDate)\n## [1] 5\n\nLet’s summarize the total number of consults for each year in our data set.\n\nconsults_yearly <- consults %>% \n  count(year=year(date), name=\"total_consults\")\n\nconsults_yearly\n\n# A tibble: 6 × 2\n   year total_consults\n  <dbl>          <int>\n1  2018            631\n2  2019            639\n3  2020            463\n4  2021            415\n5  2022            381\n6  2023            141"
  },
  {
    "objectID": "Week02/week02_lesson.html#step-3-working-with-intervals",
    "href": "Week02/week02_lesson.html#step-3-working-with-intervals",
    "title": "R Community of Practice Week 2",
    "section": "Step 3: Working with intervals",
    "text": "Step 3: Working with intervals\nNow, what if we wanted to take a look at the data for just the last fiscal year? How can we filter our data set to include just the dates we want to look at.\nlubridate can work with three types of time spans:\n\ndurations- measure physical time in seconds\nperiods – take into account human variations in time due to varying lengths of months, leap years, etc.\nintervals – timespan defined with a start and end time\n\nFirst we’ll create an interval object.\n\nfy2022 <- interval(mdy(\"07/01/2021\"), mdy(\"06/30/2022\"))\n\nNow we can keep just those consults within our desired time frame.\n\nconsults_fy2022 <-\n  consults %>% \n  filter(date %within% fy2022)\n\nAnd we can summarize these consults by month.\n\nconsults_fy22_monthly <- consults_fy2022 %>% \n count(year=year(date), month=month(date), name = \"total_consults\")\n\nconsults_fy22_monthly\n\n# A tibble: 12 × 3\n    year month total_consults\n   <dbl> <dbl>          <int>\n 1  2021     7             31\n 2  2021     8             13\n 3  2021     9             39\n 4  2021    10             65\n 5  2021    11             16\n 6  2021    12              8\n 7  2022     1             16\n 8  2022     2             62\n 9  2022     3             42\n10  2022     4             18\n11  2022     5             18\n12  2022     6             32"
  },
  {
    "objectID": "Week02/week02_lesson.html#wrapping-up",
    "href": "Week02/week02_lesson.html#wrapping-up",
    "title": "R Community of Practice Week 2",
    "section": "Wrapping Up",
    "text": "Wrapping Up\nOnce again, let’s save these our objects of summarized data to our data_output folder.\n\nsaveRDS(consults_yearly, \"data_output/consults_yearly.RDS\")\n\nsaveRDS(consults_fy22_monthly, \"data_output/consults_fy22_monthly.RDS\")\n\nBe sure to check out the lubridate documentation documentation for more!"
  },
  {
    "objectID": "Week01/week01_slides.html",
    "href": "Week01/week01_slides.html",
    "title": "R Community of Practice",
    "section": "",
    "text": "Download the data for this lesson here."
  },
  {
    "objectID": "Week01/week01_slides.html#the-data",
    "href": "Week01/week01_slides.html#the-data",
    "title": "R Community of Practice",
    "section": "The Data",
    "text": "The Data\nScenario: we want to combine and analyze several spreadsheets containing workshop registration data. Each spreadsheet has the same structure - name of attendee 1, school affiliation, and status (faculty, student, staff).\n\n\n\ndata\n├── Workshop_01.csv\n├── Workshop_02.csv\n├── Workshop_03.csv\n├── Workshop_04.csv\n├── Workshop_05.csv\n├── Workshop_06.csv\n├── Workshop_07.csv\n├── Workshop_08.csv\n├── Workshop_09.csv\n└── Workshop_10.csv\n\n\nNote: This data has been generated and contains no real personally identifiable information."
  },
  {
    "objectID": "Week01/week01_slides.html#loops",
    "href": "Week01/week01_slides.html#loops",
    "title": "R Community of Practice",
    "section": "Loops",
    "text": "Loops\nLoops are used in most programming languages when you want to repeat some set of code for multiple inputs.\n\nfor (thing in list_of_things) {\n  do_some_function()\n}"
  },
  {
    "objectID": "Week01/week01_slides.html#functional-programming-in-r",
    "href": "Week01/week01_slides.html#functional-programming-in-r",
    "title": "R Community of Practice",
    "section": "Functional Programming in R",
    "text": "Functional Programming in R\nIn R, there are several functions that accomplish the same thing as loops, in particular:\n\nThe apply() family of functions in Base R\nThe map() family of functions from the purrr package in the tidyverse\n\nmap(.x, .f)\n\nmap(function-args, function)"
  },
  {
    "objectID": "Week01/week01_slides.html#next-steps",
    "href": "Week01/week01_slides.html#next-steps",
    "title": "R Community of Practice",
    "section": "Next Steps",
    "text": "Next Steps\nSo, we have our function read_csv(), and now we want it to repeat for all the file names in our directory. So - how do we accomplish this?\n\nCreate a vector of file names\nUse map() to run read_csv() on each file name.\nCombine files into one data frame.\nSummarize data frame"
  },
  {
    "objectID": "Week01/week01_slides.html#working-with-lists",
    "href": "Week01/week01_slides.html#working-with-lists",
    "title": "R Community of Practice",
    "section": "Working with lists",
    "text": "Working with lists\n\n\n\nLike vectors, lists are made up of elements, but those elements can be anything.\nOften we use lists to work with several data frames at one time.\n\n\n\nR Data Structures 1\n\n\n\nhomogeneous\nheterogenous\n\n\n\n\n1d\nvector\nlist\n\n\n2d\nmatrix\ndata frame\n\n\nnd\narray\n\n\n\n\n\n\n\n\n\n\nFig from Advanced R by Hadley Wickham"
  },
  {
    "objectID": "Week01/week01_slides.html#learning-goals",
    "href": "Week01/week01_slides.html#learning-goals",
    "title": "R Community of Practice",
    "section": "Learning Goals",
    "text": "Learning Goals\n\nimport multiple files into RStudio at a time\nuse tools for working with directories and file paths\nbecome familiar with concept of iteration\nunderstand how to work with a list structure"
  },
  {
    "objectID": "Week02/week02_slides.html#learning-goals",
    "href": "Week02/week02_slides.html#learning-goals",
    "title": "R Community of Practice",
    "section": "Learning Goals",
    "text": "Learning Goals\n\n\nunderstand the challenges of working with dates in R\nbecome familiar with the capabilities of the lubridate package\nuse lubridate to filter and summarize data by date"
  },
  {
    "objectID": "Week02/week02_slides.html#challenges-of-working-with-dates",
    "href": "Week02/week02_slides.html#challenges-of-working-with-dates",
    "title": "R Community of Practice",
    "section": "Challenges of Working with Dates",
    "text": "Challenges of Working with Dates\n\n\ninterpreted as strings when imported to R\nmany date formats\ninconsistent time units (e.g. months, leap years, time zones)"
  },
  {
    "objectID": "Week02/week02_slides.html#the-data",
    "href": "Week02/week02_slides.html#the-data",
    "title": "R Community of Practice",
    "section": "The Data",
    "text": "The Data\nScenario: we have a spreadsheet of data tracking research consults from 2018 to 2023. We want to accomplish the following tasks:\n\n\nChange the date variable to date data type\nSummarize the number of consults by year\nSummarize consults by month for FY2022"
  },
  {
    "objectID": "Week02/week02_slides.html#lubridate-time-spans",
    "href": "Week02/week02_slides.html#lubridate-time-spans",
    "title": "R Community of Practice",
    "section": "Lubridate Time Spans",
    "text": "Lubridate Time Spans\n\ndurations - measure physical time in seconds\nperiods – take into account human variations in time due to varying lengths of months, leap years, etc.\nintervals – time span defined with a start and end time"
  },
  {
    "objectID": "Week02/week02_slides.html",
    "href": "Week02/week02_slides.html",
    "title": "R Community of Practice",
    "section": "",
    "text": "Download the data for this lesson here."
  },
  {
    "objectID": "Week01/week01_lesson.html#introduction",
    "href": "Week01/week01_lesson.html#introduction",
    "title": "Reading multiple files",
    "section": "Introduction",
    "text": "Introduction\nIn introductory R classes we learn how to import data by reading one file at a time. This week, we will “level up” our R skills by learning how to important multiple files at once. This can be especially useful when you have several files with a similar structure and want to be able to combine and analyze them together. To accomplish this goal, we’ll be working with a new data structure called a list and learning how to iterate over that list."
  },
  {
    "objectID": "Week02/week02_lesson.html#introduction",
    "href": "Week02/week02_lesson.html#introduction",
    "title": "Working with Dates",
    "section": "Introduction",
    "text": "Introduction\nDates are a particular kind of numeric data type in R. Dates can be tricky to work for a couple of reasons. Often when you import data into R, it will interpret dates as strings, or character data type. This will make things difficult if you want to do calculations with dates, or parse out a part of a date. Second, time units are often variable, months have different numbers of days, there are leap years, and time zones can be another factor to consider. In this lesson, we’ll be introducing the lubridate package, which is part of the tidyverse, and makes working with dates much more manageable."
  },
  {
    "objectID": "Week03/week03_lesson.html",
    "href": "Week03/week03_lesson.html",
    "title": "R Community of Practice Week 3",
    "section": "",
    "text": "This week we will learn about ggplot2 - a tidyverse package for visualizing data. It is a powerful and flexible tool that allows you to create fully customizable, publication quality graphics. The gg in ggplot2 stands for grammar of graphics. The grammar of graphics is the underlying philosophy of the package. It focuses on creating graphics in layers. Start with the data – map the data the axes and to aesthetic qualities like size, shape, and color and geometries like dots, lines, and polygons. Further refine the appearance of your plot by adjusting scales and legends, labels, coordinate systems, and adding annotations."
  },
  {
    "objectID": "Week03/week03_lesson.html#the-data",
    "href": "Week03/week03_lesson.html#the-data",
    "title": "R Community of Practice Week 3",
    "section": "The Data",
    "text": "The Data\nThe data we’re working with this week is familiar. We’ll visualize the workshops data frames we created in Week 1.\nBecause we saved that data as .RDS files, we can open them up and load them to our environment.\n\nall_workshops <- readRDS(file = \"data/all_workshops.RDS\")\nworkshop_breakdown <- readRDS(file = \"data/workshop_breakdown.RDS\")\n\nWe’ll complete the following tasks:\n\nCreate a basic bar chart comparing workshop attendance among the various schools.\nCreate a grouped bar chart comparing workshop attendance among the schools and university roles.\nAdd titles and labels to our graph\nAdjust the color palette\nChoose a theme\n\nLet’s open a new script and load the libraries we’ll be working with in this lesson:\n\nlibrary(tidyverse)"
  },
  {
    "objectID": "Week03/week03_lesson.html#ggplot2-basics",
    "href": "Week03/week03_lesson.html#ggplot2-basics",
    "title": "R Community of Practice Week 3",
    "section": "ggplot2 Basics",
    "text": "ggplot2 Basics\nAll ggplot2 graphs start with the same basic template:\n<DATA> %>%\n    ggplot(aes(<MAPPINGS>)) +\n    <GEOM_FUNCTION>() +\n    <Additional GEOMS, SCALES, THEMES, etc. . . >\n\nAll graphs start with the ggplot function and the data. We’ll use the pipe to pipe the data to the function.\n\nall_workshops %>% \n  ggplot()\n\n\n\n\nWe see that even this initializes the plot area of RStudio."
  },
  {
    "objectID": "Week03/week03_lesson.html#building-a-basic-bar-chart",
    "href": "Week03/week03_lesson.html#building-a-basic-bar-chart",
    "title": "R Community of Practice Week 3",
    "section": "Building a basic bar chart",
    "text": "Building a basic bar chart\nNext, we define a mapping (using the aesthetic, or aes(), function), by selecting the variables to be plotted and specifying how to present them in the graph, e.g. as x/y positions or characteristics such as size, shape, color, etc. Here we will say that the x axis should contain the affiliation variable. Note how the x-axis populates with some numbers and tick marks. We do not need to specify a y variable, since it will look at the count by default.\n\nall_workshops %>% \n  ggplot(mapping=aes(x=affiliation))\n\n\n\n\nNext we need to add ‘geoms’ – graphical representations of the data in the plot (points, lines, bars). ggplot2 offers many different geoms for common graph types. To add a geom to the plot use the + operator.\n\nall_workshops %>% \n  ggplot(mapping=aes(x=affiliation)) +\n  geom_bar()\n\n\n\n\nBy default bar graphs will display the count of the x variable, but it is also possible to specify a y variable that contains the count, as we do in our summarized dataset workshop_breakdown.\nIn this case, we would want to be able to specify affiliation as the x variable and n as the y variable.\n\nworkshop_breakdown %>% \n  ggplot(mapping = aes(x=affiliation, y=n)) +\n  geom_bar(stat=\"identity\")\n\n\n\n\nYou need to make one other adjustment, and change the stat argument from it’s default of “count” to “identity” This tells it to base the y axis on the specified variable."
  },
  {
    "objectID": "Week03/week03_lesson.html#geom-specifications",
    "href": "Week03/week03_lesson.html#geom-specifications",
    "title": "R Community of Practice Week 3",
    "section": "geom specifications",
    "text": "geom specifications\nAll geoms have certain attributes that can be modified. Polygons like bars, have the properties fill and color. You can change the inside color of a bar with fill, and the outside with color.\nIf we want to change the color of a bar, we can use the fill and color arguments in the geom_bar layer.\n\nall_workshops %>% \n  ggplot(mapping=aes(x=affiliation)) +\n  geom_bar(fill=\"blue\", color=\"black\")\n\n\n\n\nR has several built in color names. You can see them by calling the function colors(). You can also specify colors using rgb and hexadecimal codes.\nAn important concept when working with ggplot is the idea of aesthetic mapping. We used the aes function to map the x and y axis to variables. We could also do this to assign color and fill to our bars.\n\nall_workshops %>% \n  ggplot(mapping=aes(x=affiliation)) +\n  geom_bar(aes(fill=affiliation))\n\n\n\n\nNow a different color from the default ggplot palette is mapped to each level of our affiliation variable."
  },
  {
    "objectID": "Week03/week03_lesson.html#reordering-bars",
    "href": "Week03/week03_lesson.html#reordering-bars",
    "title": "R Community of Practice Week 3",
    "section": "Reordering Bars",
    "text": "Reordering Bars\nBy default our graph was ordered alphabetically by level, but it is often helpful to sort the bars numerically. We can do this with the reorder function.\n\nall_workshops %>% \n  ggplot(mapping = aes(x=forcats::fct_infreq(affiliation))) +\n  geom_bar()"
  },
  {
    "objectID": "Week03/week03_lesson.html#grouped-bar-charts",
    "href": "Week03/week03_lesson.html#grouped-bar-charts",
    "title": "R Community of Practice Week 3",
    "section": "Grouped bar charts",
    "text": "Grouped bar charts\nWhat if we want to compare affiliation and status? To do this we can create a grouped bar chart by mapping fill to the status variable.\n\nall_workshops %>% \n  ggplot(mapping=aes(x=affiliation, fill=status)) +\n  geom_bar()\n\n\n\n\nBy default this creates a stacked bar chart. To make it grouped, we add a position=\"dodged\" argument to geom_bar()\n\nall_workshops %>% \n  ggplot(mapping=aes(x=fct_infreq(affiliation), fill=status)) +\n  geom_bar(position = \"dodge\", width =0.75)"
  },
  {
    "objectID": "Week03/week03_lesson.html#working-with-color-palettes",
    "href": "Week03/week03_lesson.html#working-with-color-palettes",
    "title": "R Community of Practice Week 3",
    "section": "Working with color palettes",
    "text": "Working with color palettes\nThere are many options for changing the color palette of your plot. You can set your palette manually:\n\nmyPalette <- c(\"#C8102E\", \"#FFCD00\", \"#2C2A29\") #Official UMB colors\n\nall_workshops %>% \n  ggplot(mapping=aes(x=affiliation, fill=status)) +\n  geom_bar(position = \"dodge\", width =0.75) + \n  labs(title = \"Who is attending library workshops?\", \n       subtitle = \"Attendance by School and Role, 2018-2023\", \n       x=\"School Affiliation\", y= \"Number of Attendees\", \n       fill=\"University Role\") + \n  scale_fill_manual(values = myPalette)\n\n\n\n\nGenerally, it may be preferable to work with one of the built in ggplot2 or R palettes, or to install one of several packages with additional palettes such as:\n\nRColorBrewer\nviridis\nggthemes\nggsci\nwesanderson\n\nLet’s try applying a viridis palette. viridis was designed to be especially robust for many forms of color-blindness. It is also meant to print well in grey scale. As an additional advantage, a lightweight form of the package is included with ggplot2, so there is no need to install additional packages.\n\nall_workshops %>% \n  ggplot(mapping=aes(x=affiliation, fill=status)) +\n  geom_bar(position = \"dodge\", width = 0.75) + \n  labs(title = \"Who is attending library workshops?\", \n       subtitle = \"Attendance by School and Role, 2018-2023\", \n       x=\"School Affiliation\", \n       y= \"Number of Attendees\",\n       fill=\"University Role\") +\n  scale_fill_viridis_d()\n\n\n\n\nLearn more from the viridis documentation"
  },
  {
    "objectID": "Week03/week03_lesson.html#adding-titles-and-axis-labels",
    "href": "Week03/week03_lesson.html#adding-titles-and-axis-labels",
    "title": "R Community of Practice Week 3",
    "section": "Adding titles and axis labels",
    "text": "Adding titles and axis labels\nA good plot communicates clearly. So far we’ve talked about achieving this through the aesthetic aspects of your plot, but it’s important to make sure your graph has a clear title and axis labels as well. There are a few ways to do this in ggplot2, but one of the simplest is to use the labs() function.\n\nall_workshops %>% \n  ggplot(mapping=aes(x=affiliation, fill=status)) +\n  geom_bar(position = \"dodge\", width = 0.75) + \n  labs(title = \"Who is attending library workshops?\", \n       subtitle = \"Attendance by School and Role, 2018-2023\", \n       x=\"School Affiliation\", \n       y= \"Number of Attendees\",\n       fill=\"University Role\")"
  },
  {
    "objectID": "Week03/week03_lesson.html#changing-the-theme",
    "href": "Week03/week03_lesson.html#changing-the-theme",
    "title": "R Community of Practice Week 3",
    "section": "Changing the theme",
    "text": "Changing the theme\nThe theme of a ggplot2 graph controls the overall look and all non-data elements of the plot. There are several built-in themes which can be applied as another layer. Start typing theme_ in RStudio to see a list of themes. You can also use the theme() function to modify aspects of an existing theme. Here we apply theme_classic() which removes the grid lines and grey background of the default theme.\n\nall_workshops %>% \n  ggplot(mapping=aes(x=fct_infreq(affiliation), fill=status)) +\n  geom_bar(position = \"dodge\", width = 0.75) + \n  labs(title = \"Who is attending library workshops?\", \n       subtitle = \"Attendance by School and Role, 2018-2023\", \n       x=\"School Affiliation\", \n       y= \"Number of Attendees\",\n       fill=\"University Role\") +\n  scale_fill_viridis_d() +\n  theme_classic()"
  },
  {
    "objectID": "Week03/week03_lesson.html#helpful-resources",
    "href": "Week03/week03_lesson.html#helpful-resources",
    "title": "R Community of Practice Week 3",
    "section": "Helpful Resources",
    "text": "Helpful Resources\n\nBackground and Overview\n\nggplot2 documentation\nR for Data Science\n\nChapter 3, “Data Visualization”\nChapter 28, “Graphics for Communication”\n\n\n\n\nTutorials for Many Kinds of Plots\n\nR Graph Gallery\nR Graphics Cookbook\n\n\n\nWorking with Color and Other Aesthetics\n\nR Graph Gallery Color Section\nPaletteer package\nggplot2 Aesthetic Specifications"
  },
  {
    "objectID": "Week03/week03_lesson.html#setting-vs-mapping-aesthetics",
    "href": "Week03/week03_lesson.html#setting-vs-mapping-aesthetics",
    "title": "R Community of Practice Week 3",
    "section": "Setting vs mapping aesthetics",
    "text": "Setting vs mapping aesthetics\nWhen working with ggplot2, it’s important to understand the difference between setting aesthetic properties and mapping them. All geoms have certain visual attributes that can be modified. Polygons like bars, have the properties fill and color. You can change the inside color of a bar with fill, and the border with color. We can modify the defaults with the fill and color arguments in the geom_bar() layer. (I’ve also increased the linewidth to make it easier to see the border color)\n\nall_workshops %>% \n  ggplot(mapping=aes(x=affiliation)) +\n  geom_bar(fill=\"blue\", color=\"purple\", linewidth=1.5)\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nHow did we know the color names “blue” and “purple” would work in the code above? R has 657 (!!) built in color names. You can see them by calling the function colors(). You can also specify colors using rgb and hexadecimal codes.\n\n\nNow we have manually set a value for the fill and color. To create our initial graph, we used the mapping argument and the aes() function to map the x axis to the affiliation variable. Watch what happens if we map the fill property to the affiliation variable as well.\n\nall_workshops %>% \n  ggplot(mapping=aes(x=affiliation, fill=affiliation)) +\n  geom_bar()"
  },
  {
    "objectID": "Week03/week03_lesson.html#building-a-grouped-bar-chart",
    "href": "Week03/week03_lesson.html#building-a-grouped-bar-chart",
    "title": "R Community of Practice Week 3",
    "section": "Building a grouped bar chart",
    "text": "Building a grouped bar chart\nMapping a variable to an aesthetic is especially useful when we have third variable we want to express on our graph. For example, what if we want to compare attendance by both affiliation and status? To do this we can create a grouped bar chart by mapping fill to the status variable.\n\nall_workshops %>% \n  ggplot(mapping=aes(x=affiliation, fill=status)) +\n  geom_bar()\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nWhen you map an aesthetic with aes() in the ggplot() function it is inherited by all subsequent layers. When you map in a geom_*() function it is applied only to that layer.\n\n\nBy default this creates a stacked bar chart. To make it grouped, we add a position=\"dodged\" argument to geom_bar()\n\nall_workshops %>% \n  ggplot(mapping=aes(x=affiliation, fill=status)) + \n  geom_bar(position = \"dodge\")\n\n\n\n\nTo make our graph look less crowded, we can also modify the width of the bars. Note this is done outside of the aes() function.\n\nall_workshops %>% \n  ggplot(mapping=aes(x=affiliation, fill=status)) +\n  geom_bar(position = \"dodge\", width = 0.75)"
  },
  {
    "objectID": "Week02/week02_lesson.html#step-2-summarize-data-by-year",
    "href": "Week02/week02_lesson.html#step-2-summarize-data-by-year",
    "title": "R Community of Practice Week 2",
    "section": "Step 2: Summarize data by year",
    "text": "Step 2: Summarize data by year\nAnother set of functions in lubridate help with extracting pieces of dates.\nFor example:\n\nyear(myRealDate)\n## [1] 2023\nmonth(myRealDate)\n## [1] 6\nday(myRealDate)\n## [1] 22\nwday(myRealDate)\n## [1] 5\n\nLet’s summarize the total number of consults for each year in our data set.\n\nconsults_yearly <- consults %>% \n  count(year=year(date), name=\"total_consults\")\n\nconsults_yearly\n\n# A tibble: 6 × 2\n   year total_consults\n  <dbl>          <int>\n1  2018            631\n2  2019            639\n3  2020            463\n4  2021            415\n5  2022            381\n6  2023            141"
  },
  {
    "objectID": "Week03/week03_lesson.html#wrapping-up",
    "href": "Week03/week03_lesson.html#wrapping-up",
    "title": "R Community of Practice Week 3",
    "section": "Wrapping Up",
    "text": "Wrapping Up\nOnce your plot looks the way you want, you may want to export it to an image file for use in another document (although in Week 6 we’ll learn how to build reports with plots directly in RStudio).\nThere are two ways to export your plot:\n\nUse the Export widget in the Plots pane of RStudio\nUse the ggsave() function\n\nLet’s first save the grouped bar chart as an object:\n\nworkshop_attendance_bar <- all_workshops %>% \n  ggplot(mapping=aes(x=fct_infreq(affiliation), fill=status)) +\n  geom_bar(position = \"dodge\", width = 0.75) + \n  labs(title = \"Who is attending library workshops?\", \n       subtitle = \"Attendance by School and Role, 2018-2023\", \n       x=\"School Affiliation\", \n       y= \"Number of Attendees\",\n       fill=\"University Role\") +\n  scale_fill_viridis_d() +\n  theme_classic()\n\nNow use ggsave() to save a .jpg version of your plot to your figs/ directory. The only required argument is the file path where you want to save the image. By default it will save the last plot generated, but you can also supply the object name of the plot you want to save.\n\nggsave(filename = \"figs/workshop_attendance_bar.jpg\", workshop_attendance_bar)\n\nSaving 7 x 5 in image\n\n\nNote that you can also use this function to adjust the size and resolution of you graph.\n\nggsave(filename = \"figs/workshop_attendance_bar.jpg\", workshop_attendance_bar, width = 7, height = 5, dpi = 300)"
  },
  {
    "objectID": "Week03/week03_slides.html",
    "href": "Week03/week03_slides.html",
    "title": "R Community of Practice",
    "section": "",
    "text": "Become familiar with the basic components of a ggplot2 graph\nUnderstand the concept of “aesthetic mapping”\nUse ggplot2 to create bar graphs\nUse ggplot2 to customize graphs"
  },
  {
    "objectID": "Week03/week03_slides.html#the-data",
    "href": "Week03/week03_slides.html#the-data",
    "title": "R Community of Practice",
    "section": "The Data",
    "text": "The Data\nScenario: We want to visualize the all_workshops data frame we created in Week 1.\nWe’ll complete the following tasks:\n\n\nCreate a basic bar chart comparing workshop attendance among the various schools.\nCreate a grouped bar chart comparing workshop attendance among the schools and university roles.\nAdd titles and labels to our graph\nAdjust the color palette\nChoose a theme\nOutput graph to jpeg file"
  },
  {
    "objectID": "Week03/week03_slides.html#ggplot2-basics",
    "href": "Week03/week03_slides.html#ggplot2-basics",
    "title": "R Community of Practice",
    "section": "ggplot2 Basics",
    "text": "ggplot2 Basics\nThe “gg” in ggplot2 refers to the “grammar of graphics”.\nAll ggplot2 graphs start with the same basic template:\n<DATA> %>%\n    ggplot(aes(<MAPPINGS>)) +\n    <GEOM_FUNCTION>() +\n    <Additional GEOMS, SCALES, THEMES, etc. . . >"
  },
  {
    "objectID": "Week03/week03_slides.html#helpful-resources",
    "href": "Week03/week03_slides.html#helpful-resources",
    "title": "R Community of Practice",
    "section": "Helpful Resources",
    "text": "Helpful Resources\n\nggplot2 documentation\nR for Data Science\nR Graph Gallery\nR Graphics Cookbook\nR Graph Gallery Color Section\nggplot2 Aesthetic Specifications"
  },
  {
    "objectID": "Week03/week03_slides.html#learning-goals",
    "href": "Week03/week03_slides.html#learning-goals",
    "title": "R Community of Practice",
    "section": "Learning Goals",
    "text": "Learning Goals\n\n\nBecome familiar with the basic components of a ggplot2 graph\nUnderstand the concept of “aesthetic mapping”\nUse ggplot2 to create bar graphs\nUse ggplot2 to customize graphs"
  },
  {
    "objectID": "Week04/week04_lesson.html",
    "href": "Week04/week04_lesson.html",
    "title": "R Community of Practice Week 4",
    "section": "",
    "text": "This week we will look at the difference between the wide and long data format. This concept is related to the concept of “tidy” data, from which the tidyverse takes its name.\nAs a review, with tidy data:\n\nEach column is a variable\nEach row is an observation\nEach cell is a value.\n\nThe tidyverse packages are so called because they provide a set of tools for both producing and working with tidy data. As Figure 1 illustrates, tidy data is preferable because it is generally more predictable to work with.\n\n\n\n\n\n\n\n\n\n\nFigure 1: Tidy Data Benefits 1\n\n\nggplot2 generally requires your data to be tidy in order produce plots. In this lesson, we’ll be using the tidyr package to make our data tidy."
  },
  {
    "objectID": "Week04/week04_lesson.html#the-data",
    "href": "Week04/week04_lesson.html#the-data",
    "title": "R Community of Practice Week 4",
    "section": "2 The Data",
    "text": "2 The Data\nThis week we are looking at shelving statistics. We have a small data set which tracks numbers of materials shelved by type over four months.\nLet’s open up a new script and load the tidyverse.\n\nlibrary(tidyverse)\n\nAnd now let’s load the data:\n\nshelving_wide <- read_csv(\"data/shelving_wide.csv\")\n\nThis is a fairly small data set of just 8 rows and 6 columns.\n\n\n\n\n\n\n\n\n\n\n\n\n\nmonth\nshelver\nstacks_books\nreference_books\nbound_journals\nunbound_journals\n\n\n\n\n1\nA\n0\n0\n337\n0\n\n\n1\nB\n81\n12\n0\n0\n\n\n2\nA\n0\n0\n325\n2\n\n\n2\nB\n62\n13\n0\n0\n\n\n3\nA\n0\n8\n258\n0\n\n\n3\nB\n138\n8\n5\n0\n\n\n4\nA\n0\n0\n72\n0\n\n\n4\nB\n70\n12\n0\n0\n\n\n\n\n\nOur ultimate goal is to be able to summarize and represent this data in a bar plot.\nLet’s think about some ways we might visualize this data:\n\nNumber of items shelved by material type\nNumber of items shelved by month\nNumber of items shelved by type and month\nNumber of items shelved by shelver (also broken down by type, month)\n\nGiven what we learned about ggplot2 in our last lesson, our code should look something like this.\nshelving_wide %>% \n  ggplot(mapping=aes(x=???, y=???)) +\n  geom_bar(stat=\"identity\")\n\nIt’s challenging to name a column for x and a column for y, because this data is in what’s called a wide format, which we’ll describe more in the next section.\nSo our goal this week is to:\n\nPivot data from the wide to long format\nSummarize data in a bar plot."
  },
  {
    "objectID": "Week04/week04_lesson.html#wide-vs-long-data",
    "href": "Week04/week04_lesson.html#wide-vs-long-data",
    "title": "R Community of Practice Week 4",
    "section": "3 Wide vs Long data",
    "text": "3 Wide vs Long data\nA wide data set is one in which a variable is distributed across several rows. In our shelving_wide data frame, we have four columns: stacks_books, reference_books, bound_journals, and unbound_journals. These all represent the type of material being shelved. So, we could say that those column names represent values of the variable material type. Another variable of interest is the count of items being shelved, which is being stored in the cells of those four material type columns. Other variables in this data frame are month and shelver.\nData in this format violates Rule 1 of tidy data, because each column does not represent a single variable, instead we have the variable type of material spread out over 4 columns.\nTo make our data set tidy we would want to reduce those four columns to two columns, one for material type, and one for the count of items. By reducing the number of columns, we must also increase the number of rows. So, we are lengthening our data set to make it tidy. The final result will look like:\n\n\n\n\n\n\nmonth\nshelver\nmaterial_type\nnumber_shelved\n\n\n\n\n1\nA\nstacks_books\n0\n\n\n1\nA\nreference_books\n0\n\n\n1\nA\nbound_journals\n337\n\n\n1\nA\nunbound_journals\n0\n\n\n1\nB\nstacks_books\n81\n\n\n1\nB\nreference_books\n12\n\n\n1\nB\nbound_journals\n0\n\n\n1\nB\nunbound_journals\n0\n\n\n2\nA\nstacks_books\n0\n\n\n2\nA\nreference_books\n0\n\n\n2\nA\nbound_journals\n325\n\n\n2\nA\nunbound_journals\n2\n\n\n2\nB\nstacks_books\n62\n\n\n2\nB\nreference_books\n13\n\n\n2\nB\nbound_journals\n0\n\n\n2\nB\nunbound_journals\n0\n\n\n3\nA\nstacks_books\n0\n\n\n3\nA\nreference_books\n8\n\n\n3\nA\nbound_journals\n258\n\n\n3\nA\nunbound_journals\n0\n\n\n3\nB\nstacks_books\n138\n\n\n3\nB\nreference_books\n8\n\n\n3\nB\nbound_journals\n5\n\n\n3\nB\nunbound_journals\n0\n\n\n4\nA\nstacks_books\n0\n\n\n4\nA\nreference_books\n0\n\n\n4\nA\nbound_journals\n72\n\n\n4\nA\nunbound_journals\n0\n\n\n4\nB\nstacks_books\n70\n\n\n4\nB\nreference_books\n12\n\n\n4\nB\nbound_journals\n0\n\n\n4\nB\nunbound_journals\n0\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nWide data is not “bad”, and is very common in real world data sets, because it is easy for humans to track and read data that way. But a tidy, or long, format may make it easier to analyze that data with a computer."
  },
  {
    "objectID": "Week04/week04_lesson.html#pivot_longer",
    "href": "Week04/week04_lesson.html#pivot_longer",
    "title": "R Community of Practice Week 4",
    "section": "4 pivot_longer()",
    "text": "4 pivot_longer()\nTo lengthen our data, we’ll use the pivot_longer() function from the tidyr package. There are four arguments we need to provide:\n\ndata - the data frame to lengthen\ncols - the columns we want to pivot on\nnames_to - the name of a new column which will have our old column names as values\nvalues_to - the name of a new column which will hold the cell values of the pivoted columns\n\n\nshelving_long <- \n  shelving_wide %>% \n  pivot_longer(cols = stacks_books:unbound_journals, \n               names_to = \"material_type\",\n               values_to = \"count\")\n\nNotice that our new “long” data frame has 32 observations and 4 variables."
  },
  {
    "objectID": "Week04/week04_lesson.html#sec-plot",
    "href": "Week04/week04_lesson.html#sec-plot",
    "title": "R Community of Practice Week 4",
    "section": "5 Plotting the Data",
    "text": "5 Plotting the Data\nNow it should be easier to create our bar plot.\n\nshelving_long %>% \n  ggplot(mapping=aes(x=material_type, y=count)) +\n  geom_bar(stat=\"identity\") +\n  labs(title=\"Number of items shelved by material type\", \n       x=\"Material Type\", \n       y=\"Number of items shelved\")"
  },
  {
    "objectID": "Week04/week04_lesson.html#challenge",
    "href": "Week04/week04_lesson.html#challenge",
    "title": "R Community of Practice Week 4",
    "section": "6 Challenge",
    "text": "6 Challenge\nUsing what you learned last week, how could you create a plot of the number of items shelved each month by type as shown below. Open the code box to see a solution.\n\n\nReveal Solution\nshelving_long %>% \n  ggplot(mapping=aes(x=month, y=count, fill=material_type)) +\n  geom_bar(stat=\"identity\", position = \"dodge\") +\n  labs(title=\"Number of items shelved by material type\", \n       x=\"Month\", \n       y=\"Number of items shelved\", \n       fill=\"Material Type\") +\n  scale_fill_viridis_d(labels=c('Bound Journals', 'Reference Books', 'Stacks Books', 'Unbound Journals'))\n\n\n\n\n\nHow might we plot all four variables: month, shelver, material_type, and count? (Hint: check out the ggplot2 documentation on faceting)\n\n\nReveal Solution\nshelving_long %>% \n  ggplot(mapping=aes(x=month, y=count, fill=material_type)) +\n  geom_bar(stat=\"identity\", position = \"dodge\") +\n  labs(title=\"Number of items shelved each month\",\n       subtitle= \"By material type and shelver\", \n       x=\"Month\", \n       y=\"Number of items shelved\", \n       fill=\"Material Type\") +\n  scale_fill_viridis_d(labels=c('Bound Journals', 'Reference Books', 'Stacks Books', 'Unbound Journals')) +\n  facet_wrap(~shelver)"
  },
  {
    "objectID": "Week04/week04_lesson.html#wrapping-up",
    "href": "Week04/week04_lesson.html#wrapping-up",
    "title": "R Community of Practice Week 4",
    "section": "7 Wrapping Up",
    "text": "7 Wrapping Up\nUse ggsave() to save the plot you created in Section 5 as a .jpg file."
  },
  {
    "objectID": "Week04/week04_lesson.html#further-reading",
    "href": "Week04/week04_lesson.html#further-reading",
    "title": "R Community of Practice Week 4",
    "section": "8 Further Reading",
    "text": "8 Further Reading\nThere’s much more that can be done with pivot_longer() and it’s companion function pivot_wider and with the tidyr package in general. Check out the following resources for more information:\n\ntidyr documentation\nTidy Data Explanation\nPivoting Article"
  },
  {
    "objectID": "Week04/week04_slides.html",
    "href": "Week04/week04_slides.html",
    "title": "R Community of Practice",
    "section": "",
    "text": "Define the concept of tidy data\nDefine what is meant by long and wide data\nUnderstand the pros and cons of working with wide or long data.\nUse the tidyr package to pivot a data frame from wide to long"
  },
  {
    "objectID": "Week04/week04_slides.html#the-data",
    "href": "Week04/week04_slides.html#the-data",
    "title": "R Community of Practice",
    "section": "The Data",
    "text": "The Data\nScenario: We want to visualize a small dataset of shelving statistics.\nWe’ll complete the following tasks:\n\nPivot the data frame from wide to long using tidyr package\nPlot the data frame using what we learned about ggplot2"
  },
  {
    "objectID": "Week04/week04_slides.html#what-is-tidy-data",
    "href": "Week04/week04_slides.html#what-is-tidy-data",
    "title": "R Community of Practice",
    "section": "What is Tidy Data 1?",
    "text": "What is Tidy Data 1?\n\n“Illustrations from the Openscapes blog Tidy Data for reproducibility, efficiency, and collaboration by Julia Lowndes and Allison Horst”"
  },
  {
    "objectID": "Week04/week04_slides.html#tidy-data-is-predictable",
    "href": "Week04/week04_slides.html#tidy-data-is-predictable",
    "title": "R Community of Practice",
    "section": "Tidy Data is predictable 1",
    "text": "Tidy Data is predictable 1\n\n“Illustrations from the Openscapes blog Tidy Data for reproducibility, efficiency, and collaboration by Julia Lowndes and Allison Horst”"
  },
  {
    "objectID": "Week04/week04_slides.html#tidy-data-is-more-efficient",
    "href": "Week04/week04_slides.html#tidy-data-is-more-efficient",
    "title": "R Community of Practice",
    "section": "Tidy Data is more efficient 1",
    "text": "Tidy Data is more efficient 1\n\n“Illustrations from the Openscapes blog Tidy Data for reproducibility, efficiency, and collaboration by Julia Lowndes and Allison Horst”"
  },
  {
    "objectID": "Week04/week04_slides.html#why-isnt-our-data-tidy",
    "href": "Week04/week04_slides.html#why-isnt-our-data-tidy",
    "title": "R Community of Practice",
    "section": "Why isn’t our data tidy?",
    "text": "Why isn’t our data tidy?\n\n\n\n\n\n\n\n\n\n\n\n\n\nmonth\nshelver\nstacks_books\nreference_books\nbound_journals\nunbound_journals\n\n\n\n\n1\nA\n0\n0\n337\n0\n\n\n1\nB\n81\n12\n0\n0\n\n\n2\nA\n0\n0\n325\n2\n\n\n2\nB\n62\n13\n0\n0\n\n\n3\nA\n0\n8\n258\n0\n\n\n3\nB\n138\n8\n5\n0\n\n\n4\nA\n0\n0\n72\n0\n\n\n4\nB\n70\n12\n0\n0"
  },
  {
    "objectID": "Week04/week04_slides.html#how-would-we-plot-the-data",
    "href": "Week04/week04_slides.html#how-would-we-plot-the-data",
    "title": "R Community of Practice",
    "section": "How would we plot the data?",
    "text": "How would we plot the data?\nshelving_wide %>% \n  ggplot(mapping=aes(x=???, y=???)) +\n  geom_bar(stat=\"identity\")"
  },
  {
    "objectID": "Week04/week04_slides.html#wide-vs-long-data",
    "href": "Week04/week04_slides.html#wide-vs-long-data",
    "title": "R Community of Practice",
    "section": "Wide vs long data",
    "text": "Wide vs long data\n\nlong data\n\ndata represented with minimum number of columns necessary, tidy data\n\nwide data\n\nVariables may be spread across multiple columns. Column names often represent variable values"
  },
  {
    "objectID": "Week04/week04_slides.html#our-goal",
    "href": "Week04/week04_slides.html#our-goal",
    "title": "R Community of Practice",
    "section": "Our Goal",
    "text": "Our Goal\n\n\n\n\n\n\nmonth\nshelver\nmaterial_type\nnumber_shelved\n\n\n\n\n1\nA\nstacks_books\n0\n\n\n1\nA\nreference_books\n0\n\n\n1\nA\nbound_journals\n337\n\n\n1\nA\nunbound_journals\n0\n\n\n1\nB\nstacks_books\n81\n\n\n1\nB\nreference_books\n12\n\n\n1\nB\nbound_journals\n0\n\n\n1\nB\nunbound_journals\n0\n\n\n2\nA\nstacks_books\n0\n\n\n2\nA\nreference_books\n0\n\n\n2\nA\nbound_journals\n325\n\n\n2\nA\nunbound_journals\n2\n\n\n2\nB\nstacks_books\n62\n\n\n2\nB\nreference_books\n13\n\n\n2\nB\nbound_journals\n0\n\n\n2\nB\nunbound_journals\n0\n\n\n3\nA\nstacks_books\n0\n\n\n3\nA\nreference_books\n8\n\n\n3\nA\nbound_journals\n258\n\n\n3\nA\nunbound_journals\n0\n\n\n3\nB\nstacks_books\n138\n\n\n3\nB\nreference_books\n8\n\n\n3\nB\nbound_journals\n5\n\n\n3\nB\nunbound_journals\n0\n\n\n4\nA\nstacks_books\n0\n\n\n4\nA\nreference_books\n0\n\n\n4\nA\nbound_journals\n72\n\n\n4\nA\nunbound_journals\n0\n\n\n4\nB\nstacks_books\n70\n\n\n4\nB\nreference_books\n12\n\n\n4\nB\nbound_journals\n0\n\n\n4\nB\nunbound_journals\n0"
  },
  {
    "objectID": "Week04/week04_slides.html#pivot_longer",
    "href": "Week04/week04_slides.html#pivot_longer",
    "title": "R Community of Practice",
    "section": "pivot_longer()",
    "text": "pivot_longer()\nTo lengthen our data, we’ll use the pivot_longer() function from the tidyr package. There are four arguments we need to provide:\n\ndata - the data frame to lengthen\ncols - the columns we want to pivot on\nnames_to - the name of a new column which will have our old column names as values\nvalues_to - the name of a new column which will hold the cell values of the pivoted columns"
  },
  {
    "objectID": "Week04/week04_slides.html#learning-goals",
    "href": "Week04/week04_slides.html#learning-goals",
    "title": "R Community of Practice",
    "section": "Learning Goals",
    "text": "Learning Goals\n\n\nDefine the concept of tidy data\nDefine what is meant by long and wide data\nUnderstand the pros and cons of working with wide or long data.\nUse the tidyr package to pivot a data frame from wide to long"
  },
  {
    "objectID": "Week05/week05_lesson.html",
    "href": "Week05/week05_lesson.html",
    "title": "R Community of Practice Week 5",
    "section": "",
    "text": "This week you will learn about Rentrez, an R interface that allows its users to interact with NCBI API. With Rentrez, you do not need to use any additional program or terminal to access NCBI Data. As an R practitioner, you can request data from multiple databases in the same RStudio Session.\nFor the last few weeks, you have been working on data that you have downloaded and manage to access it locally using RStudio. Now we are shifting the gears to work with data that is not located in our computers but dynamically requested from an API."
  },
  {
    "objectID": "Week05/week05_lesson.html#install-and-load-rentrez",
    "href": "Week05/week05_lesson.html#install-and-load-rentrez",
    "title": "R Community of Practice Week 5",
    "section": "Install and Load Rentrez",
    "text": "Install and Load Rentrez\nNow, remember that you need to install any new package that you want to use in RStudio. Also, once you have the package you need to load it.\n\n#install.packages('rentrez')\nlibrary(rentrez)\n\nNow that have installed the package and loaded it into Rstudio. Let’s take a brief look at the documentation available about this resource.\nLet’s visit the Rentrez Documentation\nThis pdf provides details about each function that the R Package Rentrez has. For each function, you may find a description, usage example, arguments, and return value type. Remember that you can always use the helper( ) in R to search function descriptions."
  },
  {
    "objectID": "Week05/week05_lesson.html#helper-functions",
    "href": "Week05/week05_lesson.html#helper-functions",
    "title": "R Community of Practice Week 5",
    "section": "Helper Functions",
    "text": "Helper Functions\nHelper functions in Rentrez allow you to get acquainted with NCBI databases and their searchable fields. It also allows you to get updates on when was the last time that the database was updated.\n\nentrez_dbs()\nThis function provides a list of NCBI databases that you can use to perform searches. Let’s see how this function works.\n\nentrez_dbs()\n\n [1] \"pubmed\"          \"protein\"         \"nuccore\"         \"ipg\"            \n [5] \"nucleotide\"      \"structure\"       \"genome\"          \"annotinfo\"      \n [9] \"assembly\"        \"bioproject\"      \"biosample\"       \"blastdbinfo\"    \n[13] \"books\"           \"cdd\"             \"clinvar\"         \"gap\"            \n[17] \"gapplus\"         \"grasp\"           \"dbvar\"           \"gene\"           \n[21] \"gds\"             \"geoprofiles\"     \"homologene\"      \"medgen\"         \n[25] \"mesh\"            \"nlmcatalog\"      \"omim\"            \"orgtrack\"       \n[29] \"pmc\"             \"popset\"          \"proteinclusters\" \"pcassay\"        \n[33] \"protfam\"         \"pccompound\"      \"pcsubstance\"     \"seqannot\"       \n[37] \"snp\"             \"sra\"             \"taxonomy\"        \"biocollections\" \n[41] \"gtr\"            \n\n\n\n\nentrez_db_summary()\nHow do we know that the database is up to date? We can use the entrez_db_summary() function to see the latest updates of the selected NCBI database.\n\nentrez_db_summary(\"pubmed\")\n\n DbName: pubmed\n MenuName: PubMed\n Description: PubMed bibliographic record\n DbBuild: Build-2023.07.06.23.59\n Count: 35914080\n LastUpdate: 2023/07/06 23:59 \n\n\n\n\nentrez_db_searchable()\nHow can I build PubMed queries? What search fields does the database have? We can use the entrez_db_searchable() function to see searchable fields and its description.\n\nentrez_db_searchable(\"pubmed\")\n\nSearchable fields for database 'pubmed'\n  ALL    All terms from all searchable fields \n  UID    Unique number assigned to publication \n  FILT   Limits the records \n  TITL   Words in title of publication \n  MESH   Medical Subject Headings assigned to publication \n  MAJR   MeSH terms of major importance to publication \n  JOUR   Journal abbreviation of publication \n  AFFL   Author's institutional affiliation and address \n  ECNO   EC number for enzyme or CAS registry number \n  SUBS   CAS chemical name or MEDLINE Substance Name \n  PDAT   Date of publication \n  EDAT   Date publication first accessible through Entrez \n  VOL    Volume number of publication \n  PAGE   Page number(s) of publication \n  PTYP   Type of publication (e.g., review) \n  LANG   Language of publication \n  ISS    Issue number of publication \n  SUBH   Additional specificity for MeSH term \n  SI     Cross-reference from publication to other databases \n  MHDA   Date publication was indexed with MeSH terms \n  TIAB   Free text associated with Abstract/Title \n  OTRM   Other terms associated with publication \n  COLN   Corporate Author of publication \n  CNTY   Country of publication \n  PAPX   MeSH pharmacological action pre-explosions \n  GRNT   NIH Grant Numbers \n  MDAT   Date of last modification \n  CDAT   Date of completion \n  PID    Publisher ID \n  FAUT   First Author of publication \n  FULL   Full Author Name(s) of publication \n  FINV   Full name of investigator \n  TT     Words in transliterated title of publication \n  LAUT   Last Author of publication \n  PPDT   Date of print publication \n  EPDT   Date of Electronic publication \n  LID    ELocation ID \n  CRDT   Date publication first accessible through Entrez \n  BOOK   ID of the book that contains the document \n  ED     Section's Editor \n  ISBN   ISBN \n  PUBN   Publisher's name \n  AUCL   Author Cluster ID \n  EID    Extended PMID \n  DSO    Additional text from the summary \n  AUID   Author Identifier \n  PS     Personal Name as Subject \n  COIS   Conflict of Interest Statements \n  WORD   Free text associated with publication \n  P1DAT      Date publication first accessible through Solr \n\n\nLet’s strategize our search! Now that we know the search fields you can use to build a query, let’s perform our first search."
  },
  {
    "objectID": "Week05/week05_lesson.html#performing-searches-with-rentrez",
    "href": "Week05/week05_lesson.html#performing-searches-with-rentrez",
    "title": "R Community of Practice Week 5",
    "section": "Performing searches with Rentrez",
    "text": "Performing searches with Rentrez\nThe functions listed under this category allow you to use a search term or query to retrieve a list of article/object ids. This list of ids will later allow you to retrieve partial or full summary records of that article/object.\n\nentrez_search()\nSimilar to PubMed, Rentrez allows you to perform simple or boolean searches using the same structure that you would use in the PubMed search bar. This function allows you to find records that match your keyword.\nFirst, let’s learn the syntax for a simple and a boolean search:\nSimple Search:\nentrez_search(db= \"database name\", term= \"searchword[field]\")\nBoolean search: The allowed boolean terms are AND, OR, and NOT.\nentrez_search(db= \"database name\", term= \"searchword[field] <boolean term> searchword[field]\")\nThe entrez_search() function takes 4 arguments. The required ones are db and term.\n\nList of arguments and its usage:\n\ndb, name of the database to search for\nterm, the search term, you can also use MeSH terms to perform your search\nretmax, the default of retrievable ids is 20, this argument can be used to change that number\nretmode, to select the format of your output (XML or JSON), by default will be XML\nuse_history, to store a history of searches in NCBI’s server\n\n\nEXAMPLES:\n\n#PRACTICING SEARCHES\n#Doing a simple search using search fields\npcos_pm <- entrez_search(db=\"pubmed\", term = \"pcos[all]\")\n\n#Doing a boolean search \npcos_ir_pm <- entrez_search(db=\"pubmed\", term= \"pcos[all] AND insulin resistance[all]\")\n\n#See how may trials about this condition has been done\npcos_ir_ct_pm <- entrez_search(db=\"pubmed\", term= \"pcos[all] AND insulin resistance[all] AND Clinical Trial[ptyp]\")\n\n#Articles that include PCOS + Insulin Resistance AND have Authors affiliated with UMD\npcos_ir_umb_pm <- entrez_search(db=\"pubmed\", term= \"pcos[all] AND insulin resistance[all] AND University of Maryland[affl]\")\n\nWhat does the entrez_search() function RETURNS?\n\nThe entrez_search() function returns a list of elements that includes the following:\n\nids, is an identifying number for each publication record found\ncount, is the total number of records found\nretmax, is the maximum of records that you can retrieve, the default is 20\nweb_history, stored article/object ids in NCBI server\nQueryTranslation, NCBI interpretation of your search term\nfile, type of file return from search, the default is XML\n\n\nAn important field here is the QueryTranslation value which allows you to see how NCBI API has interpreted your selected term words according to MESH Terms. Another important field is the ids, this field will have a list of ids that later will allow you to retrieve partial or full summary records.\n\n\nentrez_summary()\nNow let’s retrieve partial information about the records we collected in one of our searches. This function takes a vector of unique IDs or just one id.\nBut, first, let’s learn the syntax of the entrez_summary() function.\nentrez_summary(db=\"<database name>\", id=< >)\nThe entrez_summary() function takes 7 arguments but you don’t need to use them all. The required ones are db and id.\n\nList of arguments and its usage:\n\ndb, name of the database to search for\nid, unique ID(s) for records in database\nweb_history, stored article/object ids in NCBI server\n\n\nEXAMPLES:\n\n#Rentrez summary function to get publication information\n#In this command we are giving a list of ids by using pcos_pm$ids. The $ operator extracts a subset of a data object in R.  \nsummary_pcos_pm <- entrez_summary(db=\"pubmed\", id=pcos_pm$ids)\n\nWhat does the entrez_summary() function RETURNS?\nThis function returns an NCBI API object called esummary, which means a list of items for multiple or single records. The elements return behave like a list so you can use $ to call any item.\nFor the entrez_summary() function, Rentrez has created a function that allows you to extract information from each metadata field avoiding the challenges that come with navigating an XML document.\n\n\nextract_from_esummary()\nThis function helps you navigate through an XMLInternalDocument and extract elements from a list of esummary records.\nBut, first and let’s learn the syntax of the extract_from_esummary() function.\nextract_from_esummary(esummaries, elements, simplify = TRUE)\nThe extract_from_summary() function takes 3 arguments but you don’t need to use them all. The required ones are esummary and elements.\n\nList of arguments and its usage:\n\nesumaries, either an esummary or an esummary_list (as returned by entrez_summary)\nelements, unique ID(s) for records in database\nsimplify, if possible return a vector\n\n\nEXAMPLE:\n\n# If you have been performing searches in PubMed, you can use the following coding lines as a guide.\n\nuids <- extract_from_esummary(summary_pcos_pm,\"uid\")\nauthors <- extract_from_esummary(summary_pcos_pm,\"authors\")[\"name\",]\n\nWhat does the extract_from_esummary() function RETURNS?\nThis function returns a list or vector containing information on the requested item.\n\n\nentrez_fetch()\nAnother way to get records from the NBCI API is by using the entrez_fetch() function. In some cases, entrez_fetch(), will retrieve a complete bibliographic record of the article or data object. Another difference between entrez_summary and entrez_fetch is in the way both functions arrange the data in RStudio. entrez_summary() in most of the cases will return a data frame with elements that behave as lists, while entrez_fetch() will return an XML Document.\nEXAMPLE:\n\nfetch <- entrez_fetch(db= \"pubmed\", id = pcos_pm$ids, rettype = \"xml\")"
  },
  {
    "objectID": "Week05/week05_lesson.html#contrasting-ncbi-databases",
    "href": "Week05/week05_lesson.html#contrasting-ncbi-databases",
    "title": "R Community of Practice Week 5",
    "section": "Contrasting NCBI Databases",
    "text": "Contrasting NCBI Databases\n\nentrez_global_query()\nThe entrez_global_query() function allows you to search a term on all NCBI Entrez Databases.\nThe syntax for this function is\nentrez_global_query(term= \"search term\", config = NULL, ...)\nAs you can see the function takes config= NULL as an argument, but we are not going to use that in this tutorial.\nThe argument config means the type of connection that you are requesting from the API, this could be GET or POST. In the NCBI API context if you are performing big data requests they recommend you to use a combination of web_history and config = POST arguments to not saturate their servers.\nLet’s test this function and see what it returns.\nEXAMPLE:\n\nglobal_query <- (\"PCOS\")\nall_databases <- entrez_global_query(global_query)\n# Lets view the results\nall_databases\n\n         pubmed             pmc            mesh           books    pubmedhealth \n          15275           18135               1             474              NA \n           omim      ncbisearch         nuccore          nucgss          nucest \n             22               0          104793               0               0 \n        protein          genome       structure        taxonomy             snp \n          12312              72               4               0               0 \n          dbvar            gene             sra      biosystems         unigene \n              0             617            3186              NA               0 \n            cdd           clone          popset     geoprofiles             gds \n              3               0               3          373883             960 \n     homologene      pccompound     pcsubstance         pcassay      nlmcatalog \n              0               0               5              63              33 \n          probe             gap proteinclusters      bioproject       biosample \n              0              53               0             196            4180 \n biocollections \n              0 \n\n\nWhat does the entrez_global_query() function RETURNS?\nThis function returns a named vector with counts for each database. This means a list of totals of articles found related to your search term for each database.\nAnother function that allows you to contrast searches within the NBCI databases is the entrez_links() function.\n\n\nentrez_links()\nThe entrez_link() function allows you to get links to related records from an NCBI database. This function uses a unique identifier or a set of unique identifiers to search related articles in other NCBI databases.\nLet’s have a look at the syntax of this function.\nentrez_link(dbfrom = \"database name\" , web_history = \"\" , id = \"\" , db = \"database name\", cmd = \"\", by_id = FALSE, config = \"\")\n\nLet’s have a look at the arguments required for this function.\n\ndbfrom, name of database from which the Id(s) originate\nweb_history, stored article/object ids in NCBI servers\nid, vector with unique ID(s) for records in database db\ndb, name of the database to search for links\ncmd, select an option from a defined list: neighbor, neighbor_score, neighbor_hsitory, acheck, ncheck, lcheck, llinks, llinkslib, prlinks\nby_id, if FALSE (default) return a single elink objects containing links for all of the provided ids. Alternatively, if TRUE return a list of elink objects, one for each ID in id.\nconfig, configuration options passed to httr::GET\n\n\nLet’s test this variable!\nEXAMPLE:\nLet’s select an article that is related to two characteristics of PCOS, Insulin Resistance, and Metabolic Syndrome.\nOne option can be:\nBrown, Audrey E, and Mark Walker. “Genetics of Insulin Resistance and the Metabolic Syndrome.” Current cardiology reports vol. 18,8 (2016): 75. doi:10.1007/s11886-016-0755-4\n\npcos_links <-entrez_link(dbfrom=\"pubmed\", id=\"10.1007/s11886-016-0755-4\", db= \"all\")\npcos_links$links\n\nelink result with information from 20 databases:\n [1] pubmed_bioproject          pubmed_gds                \n [3] pubmed_pmc_refs            pubmed_pubmed             \n [5] pubmed_pubmed_alsoviewed   pubmed_pubmed_citedin     \n [7] pubmed_pubmed_combined     pubmed_pubmed_five        \n [9] pubmed_pubmed_refs         pubmed_pubmed_reviews     \n[11] pubmed_pubmed_reviews_five pubmed_snp                \n[13] pubmed_sra                 pubmed_books_refs         \n[15] pubmed_mesh_major          pubmed_pccompound         \n[17] pubmed_pccompound_mesh     pubmed_pcsubstance        \n[19] pubmed_taxonomy_entrez     pubmed_taxonomy_mesh      \n\n\nOur results shows that there are related articles in databases such as the SRA, SNP, and others.\nNow searching the titles for articles that cited the our initial selected article.\n\nsummary_pcos_citedin <- entrez_summary(db=\"pubmed\", id=pcos_links$links$pubmed_pubmed_citedin, rettype = \"xml\")\nsummary_pcos_citedin\n\nList of  73 esummary records. First record:\n\n $`37287978`\nesummary result with 42 items:\n [1] uid               pubdate           epubdate          source           \n [5] authors           lastauthor        title             sorttitle        \n [9] volume            issue             pages             lang             \n[13] nlmuniqueid       issn              essn              pubtype          \n[17] recordstatus      pubstatus         articleids        history          \n[21] references        attributes        pmcrefcount       fulljournalname  \n[25] elocationid       doctype           srccontriblist    booktitle        \n[29] medium            edition           publisherlocation publishername    \n[33] srcdate           reportnumber      availablefromurl  locationlabel    \n[37] doccontriblist    docdate           bookname          chapter          \n[41] sortpubdate       sortfirstauthor  \n\n\nNow searching for matches in the SRA Database.\n\nsummary_pcos_sra <- entrez_summary(db=\"sra\", id=pcos_links$links$pubmed_sra, rettype = \"xml\")\nsummary_pcos_sra\n\nList of  11 esummary records. First record:\n\n $`11727567`\nesummary result with 5 items:\n[1] uid        expxml     runs       extlinks   createdate\n\n\nNow searching for matches in the SNP Database\n\nsummary_pcos_snp <- entrez_summary(db=\"snp\", id=pcos_links$links$pubmed_snp, rettype = \"xml\")\nsummary_pcos_snp\n\nList of  3 esummary records. First record:\n\n $`76763715`\nesummary result with 31 items:\n [1] uid                   snp_id                allele_origin        \n [4] global_mafs           global_population     global_samplesize    \n [7] suspected             clinical_significance genes                \n[10] acc                   chr                   handle               \n[13] spdi                  fxn_class             validated            \n[16] docsum                tax_id                orig_build           \n[19] upd_build             createdate            updatedate           \n[22] ss                    allele                snp_class            \n[25] chrpos                chrpos_prev_assm      text                 \n[28] snp_id_sort           clinical_sort         cited_sort           \n[31] chrpos_sort          \n\n\nWhat does the entrez_link function returns?\nThis function returns an NCBI API object called, “elink”, which is a list of ids by a database."
  },
  {
    "objectID": "Week05/week05_lesson.html#rentrez-web_history",
    "href": "Week05/week05_lesson.html#rentrez-web_history",
    "title": "R Community of Practice Week 5",
    "section": "Rentrez web_history",
    "text": "Rentrez web_history\nTo perform big data requests, Rentrez offers the use_history boolean argument. When you enable history in a search, the object returned includes a web_history object that can be used to paginate across results. Without the web_history object results are limited to the first N results set using retmax.\nWhen you enable use_history in a search, the search object includes a small sample of ids. However, using the web_history object in combination of the retmax and retstart you will be able to obtain far more records than you would obtain from a search without web_history.\nCurrently, pagination is limited to 10,000 records without an API key."
  },
  {
    "objectID": "Week05/week05_lesson.html#example",
    "href": "Week05/week05_lesson.html#example",
    "title": "R Community of Practice Week 5",
    "section": "Example",
    "text": "Example\n\nScenario\nI’m interested in gathering a list of genes related to PCOS publications within the years 2021 to 2024.\n\n\nSetting my search\nIn this instance I’m enabling use history because eventually I want to examine cross-references in between PubMed and Gene.\n\nsearch <- entrez_search(db=\"pubmed\", term=\"pcos AND 2021:2024[PDAT]\", use_history= TRUE)\n\n\n\nObtained Linked Gene IDs from the “gene” NCBI Database\n\nall_pubmed_gene_link = c() # Empty list to accumulate results\npage_size <- 100 # retmax and page_size needs to be the same number\nmax_limit <- 1000 # Can't be higher that 10000 due to API limits\nmax_results <- min(search$count,max_limit) # Set max result number for efficiency\n\nfor(page_start in seq(1,max_results,page_size)){\n  links <- entrez_link(\n    dbfrom=\"pubmed\", db=\"gene\",\n    web_history = search$web_history, \n    by_id = FALSE, # Return a unified list of genes, instead of genes per PubMed publication\n    retmax = page_size, \n    retstart = page_start # page_start controls pagination\n  )\n# Add results to list\n  all_pubmed_gene_link <- c(\n    all_pubmed_gene_link, \n    links$links$pubmed_gene\n  ) \n}\n\n\n\nWhy do we used a for-loop?\nIn this instance a for-loop was needed to iteratively query the API. If API queries are performed in bulk, there is a higher risk of hitting the API’s rate limit. Rentrez offers internal functionality that, in theory, should protect the code from getting blocked by the API.\n\n\nDisplay first results\n\nhead(all_pubmed_gene_link)\n\n[1] \"14910\" \"7157\"  \"1956\"  \"7124\"  \"3569\"  \"4524\""
  },
  {
    "objectID": "Week05/week05_slides.html",
    "href": "Week05/week05_slides.html",
    "title": "Accessing NCBI data with the Rentrez package",
    "section": "",
    "text": "Our goals for today are:\n\nBecome familiar Rentrez.\nLearn basic search functions.\nExtract information from the esumaries.\n\nChallenges of Working with Data an Unknown Source\n\nThe data may not arranged in a standardized format (BIBFRAME, MARC, METS, MODS, EAD…)\nThe source documentation may be incomplete, or may not answer our questions.\nNot knowing what extra steps we may need to take to clean the data, so it can be usable."
  },
  {
    "objectID": "Week05/week05_slides.html#the-data",
    "href": "Week05/week05_slides.html#the-data",
    "title": "Accessing NCBI data with the Rentrez package",
    "section": "The Data",
    "text": "The Data\n\nScenario:\nToday our data comes from PubMed, a National Center for Biotechnology Information (NCBI) database. Our data outputs, will contain bibliographic information about our search query.\nChallenges of Working with Data from an Unknown Source\n\nThe data may not arranged in a standardized format (BIBFRAME, MARC, METS, MODS, EAD…)\nThe source documentation may be incomplete, or may not answer our questions.\nNot knowing what extra steps we may need to take to clean the data, so it can be usable.\n\nWe want to accomplish the following tasks:\n\nDownload Rentrez.\nPerform simple and boolean searches.\nCreate a graph using your search results."
  },
  {
    "objectID": "Week05/week05_slides.html#what-is-rentrez",
    "href": "Week05/week05_slides.html#what-is-rentrez",
    "title": "Accessing NCBI data with the Rentrez package",
    "section": "What is Rentrez?",
    "text": "What is Rentrez?\nRentrez is an R interface that allows its users to interact with NCBI API.\nWith Rentrez, you do not need to use any additional program or terminal to access NCBI Data.\nThis means that you can request data from multiple databases (PubMed, SNP, Clinvar, SRA, Gene, and others) in the same RStudio Session."
  },
  {
    "objectID": "Week05/week05_slides.html#install-and-load-rentrez",
    "href": "Week05/week05_slides.html#install-and-load-rentrez",
    "title": "Accessing NCBI data with the Rentrez package",
    "section": "Install and Load Rentrez",
    "text": "Install and Load Rentrez\nNow, remember that you need to install any new package that you want to use in RStudio. Also, once you have the package you need to load it.\n\n\nCode\n#install.packages('rentrez')\nlibrary(rentrez)"
  },
  {
    "objectID": "Week05/week05_slides.html#rentrez-functions",
    "href": "Week05/week05_slides.html#rentrez-functions",
    "title": "Accessing NCBI data with the Rentrez package",
    "section": "Rentrez Functions",
    "text": "Rentrez Functions\n\nThe functions listed below help you learn a little bit more about Rentrez and NCBI Databases.\n\n\n\n\n\n\n\nFunction\nUsage\n\n\n\n\nentrez_dbs()\nList of Entrez Databases\n\n\nentrez_db_summary()\nBrief description of what the database is\n\n\nentrez_db_searchable()\nSet of search fields that can used with this database"
  },
  {
    "objectID": "Week05/week05_slides.html#performing-searches-with-rentrez",
    "href": "Week05/week05_slides.html#performing-searches-with-rentrez",
    "title": "Accessing NCBI data with the Rentrez package",
    "section": "Performing searches with Rentrez",
    "text": "Performing searches with Rentrez\n\nThe functions listed below help you perform searches to a NCBI Database.\n\n\n\n\n\n\n\nFunction\nUsage\n\n\n\n\nentrez_search()\nAllows you to perform simple or boolean searches\n\n\nentrez_summary()\nAllows you to retrieve basic information about the records found\n\n\nextract_from_esummary()\nExtract elements from a list of esummary records"
  },
  {
    "objectID": "Week05/week05_slides.html#entrez_search",
    "href": "Week05/week05_slides.html#entrez_search",
    "title": "Accessing NCBI data with the Rentrez package",
    "section": "entrez_search()",
    "text": "entrez_search()\nSimilar to PubMed, Rentrez allows you to perform simple or boolean searches using the same structure that you would use in the PubMed search bar. The allowed boolean terms are AND, OR, and NOT.\n\nFirst, let’s learn the syntax for a simple and a boolean search:\n\nSimple Search:\n\n\nCode\npcos_pm <- entrez_search(db=\"pubmed\", term = \"pcos[all]\")\n\n\nBoolean search:\n\n\nCode\npcos_ir_pm <- entrez_search(db=\"pubmed\", term= \"pcos[all] AND insulin resistance[all]\")"
  },
  {
    "objectID": "Week05/week05_slides.html#entrez_summary",
    "href": "Week05/week05_slides.html#entrez_summary",
    "title": "Accessing NCBI data with the Rentrez package",
    "section": "entrez_summary()",
    "text": "entrez_summary()\nNow let’s retrieve basic information about the records we collected in one of our searches. But, first, let’s learn the syntax of the entrez_summary() function.\n\n\nCode\nsummary_pcos_pm <- entrez_summary(db=\"pubmed\", id=pcos_pm$ids)"
  },
  {
    "objectID": "Week05/week05_slides.html#extract_from_esummary",
    "href": "Week05/week05_slides.html#extract_from_esummary",
    "title": "Accessing NCBI data with the Rentrez package",
    "section": "extract_from_esummary()",
    "text": "extract_from_esummary()\nThis function helps you navigate through an XMLInternalDocument and extract elements from a list of esummary records. But, first, let’s learn the syntax of the extract_from_esummary() function.\n\n\n\nCode\nuids <- extract_from_esummary(summary_pcos_pm,\"uid\")\nauthors <- extract_from_esummary(summary_pcos_pm,\"authors\")[\"name\",]\npubdate <- extract_from_esummary(summary_pcos_pm,\"pubdate\")"
  },
  {
    "objectID": "Week05/week05_slides.html#exercise-lets-practice",
    "href": "Week05/week05_slides.html#exercise-lets-practice",
    "title": "Accessing NCBI data with the Rentrez package",
    "section": "Exercise: Let’s practice!",
    "text": "Exercise: Let’s practice!\nNow lets perform our own searches!\nWe are going to use the Rentrez functions to extract data from an NCBI database.\nOur objective is to:\n\nBuild your query: Identify your search terms, adequate database, search fields and perform the search using rentrez.\nGet article/object summaries.\nSelect the values that you would like to save (for example author, title, source).\nCreate a graph that represents the results of your search."
  },
  {
    "objectID": "Week05/week05_slides.html#step-1",
    "href": "Week05/week05_slides.html#step-1",
    "title": "Accessing NCBI data with the Rentrez package",
    "section": "STEP #1",
    "text": "STEP #1\nBuild your query: Identify your search terms, adequate database, and search fields and perform the search using Rentrez.\n\n\nCode\n# Im interested in seeing Dr. Kristen Stafford Publications, Associate Professor of Epidemiology and Deputy Director - Center for International Health, Education, and Biosecurity\n\nsearch <- entrez_search(db=\"pubmed\", term = \"Kristen A. Stafford[AUTH]\",retmax=100)\nsearch\n\n\nEntrez search result with 51 hits (object contains 51 IDs and no web_history object)\n Search term (as translated):  stafford, kristen a[Author]"
  },
  {
    "objectID": "Week05/week05_slides.html#step-2",
    "href": "Week05/week05_slides.html#step-2",
    "title": "Accessing NCBI data with the Rentrez package",
    "section": "STEP #2",
    "text": "STEP #2\nGet article summaries\n\n\nCode\nsummary <- entrez_summary(db=\"pubmed\", id=search$ids)\nsummary\n\n\nList of  51 esummary records. First record:\n\n $`37247622`\nesummary result with 42 items:\n [1] uid               pubdate           epubdate          source           \n [5] authors           lastauthor        title             sorttitle        \n [9] volume            issue             pages             lang             \n[13] nlmuniqueid       issn              essn              pubtype          \n[17] recordstatus      pubstatus         articleids        history          \n[21] references        attributes        pmcrefcount       fulljournalname  \n[25] elocationid       doctype           srccontriblist    booktitle        \n[29] medium            edition           publisherlocation publishername    \n[33] srcdate           reportnumber      availablefromurl  locationlabel    \n[37] doccontriblist    docdate           bookname          chapter          \n[41] sortpubdate       sortfirstauthor"
  },
  {
    "objectID": "Week05/week05_slides.html#step-3",
    "href": "Week05/week05_slides.html#step-3",
    "title": "Accessing NCBI data with the Rentrez package",
    "section": "STEP #3",
    "text": "STEP #3\nSelect the values that you would like to save (for example author, title, source)\n\n\nCode\n# I want to know how many publications she has and in what journal she publishes the most. \n\nlibrary(tidyverse)\n\npubdate <- extract_from_esummary(summary,\"pubdate\") %>%\n  substr(start= 1, stop=4)\nsource <- extract_from_esummary(summary,\"source\")"
  },
  {
    "objectID": "Week05/week05_slides.html#step-4",
    "href": "Week05/week05_slides.html#step-4",
    "title": "Accessing NCBI data with the Rentrez package",
    "section": "STEP #4",
    "text": "STEP #4\nCreate a graph that represents the results of your search.\n\n\nCode\nggplot(mapping = aes(x=source)) + \n  geom_bar() +\n  theme(axis.text.x = element_text(angle = 90)) + # To rotate journals names\n  labs(title = \"Kristen's Stafford Publications per journal\", # Set up graph title and labels\n       x=\"Journal\", y= \"Amount\")"
  },
  {
    "objectID": "Week05/week05_slides.html#learning-goals",
    "href": "Week05/week05_slides.html#learning-goals",
    "title": "Accessing NCBI data with the Rentrez package",
    "section": "Learning Goals:",
    "text": "Learning Goals:\n\nOur goals for today are:\n\nBecome familiar Rentrez.\nLearn basic search functions.\nExtract information from the esumaries."
  },
  {
    "objectID": "Week05/week05_v2_lesson.html",
    "href": "Week05/week05_v2_lesson.html",
    "title": "R Community of Practice Week 5",
    "section": "",
    "text": "This week you will learn about Rentrez, an R interface that allows its users to interact with NCBI API. With Rentrez, you do not need to use any additional program or terminal to access NCBI Data. As an R practitioner, you can request data from multiple databases in the same RStudio Session.\nFor the last few weeks, you have been working on data that you have downloaded and manage to access it locally using RStudio. Now we are shifting the gears to work with data that is not located in our computers but dynamically requested from an API."
  },
  {
    "objectID": "Week05/week05_v2_lesson.html#install-and-load-rentrez",
    "href": "Week05/week05_v2_lesson.html#install-and-load-rentrez",
    "title": "R Community of Practice Week 5",
    "section": "Install and Load Rentrez",
    "text": "Install and Load Rentrez\nNow, remember that you need to install any new package that you want to use in RStudio. Also, once you have the package you need to load it.\n\n#install.packages('rentrez')\nlibrary(rentrez)\n\nNow that have installed the package and loaded it into Rstudio. Let’s take a brief look at the documentation available about this resource.\nLet’s visit the Rentrez Documentation\nThis pdf provides details about each function that the R Package Rentrez has. For each function, you may find a description, usage example, arguments, and return value type. Remember that you can always use the helper( ) in R to search function descriptions."
  },
  {
    "objectID": "Week05/week05_v2_lesson.html#helper-functions",
    "href": "Week05/week05_v2_lesson.html#helper-functions",
    "title": "R Community of Practice Week 5",
    "section": "Helper Functions",
    "text": "Helper Functions\nHelper functions in Rentrez allow you to get acquainted with NCBI databases and their searchable fields. It also allows you to get updates on when was the last time that the database was updated.\n\nentrez_dbs()\nThis function provides a list of NCBI databases that you can use to perform searches. Let’s see how this function works.\n\nentrez_dbs()\n\n [1] \"pubmed\"          \"protein\"         \"nuccore\"         \"ipg\"            \n [5] \"nucleotide\"      \"structure\"       \"genome\"          \"annotinfo\"      \n [9] \"assembly\"        \"bioproject\"      \"biosample\"       \"blastdbinfo\"    \n[13] \"books\"           \"cdd\"             \"clinvar\"         \"gap\"            \n[17] \"gapplus\"         \"grasp\"           \"dbvar\"           \"gene\"           \n[21] \"gds\"             \"geoprofiles\"     \"homologene\"      \"medgen\"         \n[25] \"mesh\"            \"nlmcatalog\"      \"omim\"            \"orgtrack\"       \n[29] \"pmc\"             \"popset\"          \"proteinclusters\" \"pcassay\"        \n[33] \"protfam\"         \"pccompound\"      \"pcsubstance\"     \"seqannot\"       \n[37] \"snp\"             \"sra\"             \"taxonomy\"        \"biocollections\" \n[41] \"gtr\"            \n\n\n\n\nentrez_db_summary()\nHow do we know that the database is up to date? We can use the entrez_db_summary() function to see the latest updates of the selected NCBI database.\n\nentrez_db_summary(\"pubmed\")\n\n DbName: pubmed\n MenuName: PubMed\n Description: PubMed bibliographic record\n DbBuild: Build-2023.07.07.21.35\n Count: 35919079\n LastUpdate: 2023/07/07 21:35 \n\n\n\n\nentrez_db_searchable()\nHow can I build PubMed queries? What search fields does the database have? We can use the entrez_db_searchable() function to see searchable fields and its description.\n\nentrez_db_searchable(\"pubmed\")\n\nSearchable fields for database 'pubmed'\n  ALL    All terms from all searchable fields \n  UID    Unique number assigned to publication \n  FILT   Limits the records \n  TITL   Words in title of publication \n  MESH   Medical Subject Headings assigned to publication \n  MAJR   MeSH terms of major importance to publication \n  JOUR   Journal abbreviation of publication \n  AFFL   Author's institutional affiliation and address \n  ECNO   EC number for enzyme or CAS registry number \n  SUBS   CAS chemical name or MEDLINE Substance Name \n  PDAT   Date of publication \n  EDAT   Date publication first accessible through Entrez \n  VOL    Volume number of publication \n  PAGE   Page number(s) of publication \n  PTYP   Type of publication (e.g., review) \n  LANG   Language of publication \n  ISS    Issue number of publication \n  SUBH   Additional specificity for MeSH term \n  SI     Cross-reference from publication to other databases \n  MHDA   Date publication was indexed with MeSH terms \n  TIAB   Free text associated with Abstract/Title \n  OTRM   Other terms associated with publication \n  COLN   Corporate Author of publication \n  CNTY   Country of publication \n  PAPX   MeSH pharmacological action pre-explosions \n  GRNT   NIH Grant Numbers \n  MDAT   Date of last modification \n  CDAT   Date of completion \n  PID    Publisher ID \n  FAUT   First Author of publication \n  FULL   Full Author Name(s) of publication \n  FINV   Full name of investigator \n  TT     Words in transliterated title of publication \n  LAUT   Last Author of publication \n  PPDT   Date of print publication \n  EPDT   Date of Electronic publication \n  LID    ELocation ID \n  CRDT   Date publication first accessible through Entrez \n  BOOK   ID of the book that contains the document \n  ED     Section's Editor \n  ISBN   ISBN \n  PUBN   Publisher's name \n  AUCL   Author Cluster ID \n  EID    Extended PMID \n  DSO    Additional text from the summary \n  AUID   Author Identifier \n  PS     Personal Name as Subject \n  COIS   Conflict of Interest Statements \n  WORD   Free text associated with publication \n  P1DAT      Date publication first accessible through Solr \n\n\nLet’s strategize our search! Now that we know the search fields you can use to build a query, let’s perform our first search."
  },
  {
    "objectID": "Week05/week05_v2_lesson.html#performing-searches-with-rentrez",
    "href": "Week05/week05_v2_lesson.html#performing-searches-with-rentrez",
    "title": "R Community of Practice Week 5",
    "section": "Performing searches with Rentrez",
    "text": "Performing searches with Rentrez\nThe functions listed under this category allow you to use a search term or query to retrieve a list of article/object ids. This list of ids will later allow you to retrieve partial or full summary records of that article/object.\n\nentrez_search()\nSimilar to PubMed, Rentrez allows you to perform simple or boolean searches using the same structure that you would use in the PubMed search bar. This function allows you to find records that match your keyword.\nFirst, let’s learn the syntax for a simple and a boolean search:\nSimple Search:\nentrez_search(db= \"database name\", term= \"searchword[field]\")\nBoolean search: The allowed boolean terms are AND, OR, and NOT.\nentrez_search(db= \"database name\", term= \"searchword[field] <boolean term> searchword[field]\")\nThe entrez_search() function takes 4 arguments. The required ones are db and term.\n\nList of arguments and its usage:\n\ndb, name of the database to search for\nterm, the search term, you can also use MeSH terms to perform your search\nretmax, the default of retrievable ids is 20, this argument can be used to change that number\nretmode, to select the format of your output (XML or JSON), by default will be XML\nuse_history, to store a history of searches in NCBI’s server\n\n\nEXAMPLES:\n\n#PRACTICING SEARCHES\n#Doing a simple search using search fields\npcos_pm <- entrez_search(db=\"pubmed\", term = \"pcos[all]\")\n\n#Doing a boolean search \npcos_ir_pm <- entrez_search(db=\"pubmed\", term= \"pcos[all] AND insulin resistance[all]\")\n\n#See how may trials about this condition has been done\npcos_ir_ct_pm <- entrez_search(db=\"pubmed\", term= \"pcos[all] AND insulin resistance[all] AND Clinical Trial[ptyp]\")\n\n#Articles that include PCOS + Insulin Resistance AND have Authors affiliated with UMD\npcos_ir_umb_pm <- entrez_search(db=\"pubmed\", term= \"pcos[all] AND insulin resistance[all] AND University of Maryland[affl]\")\n\nWhat does the entrez_search() function RETURNS?\n\nThe entrez_search() function returns a list of elements that includes the following:\n\nids, is an identifying number for each publication record found\ncount, is the total number of records found\nretmax, is the maximum of records that you can retrieve, the default is 20\nweb_history, stored article/object ids in NCBI server\nQueryTranslation, NCBI interpretation of your search term\nfile, type of file return from search, the default is XML\n\n\nAn important field here is the QueryTranslation value which allows you to see how NCBI API has interpreted your selected term words according to MESH Terms. Another important field is the ids, this field will have a list of ids that later will allow you to retrieve partial or full summary records.\n\n\nentrez_summary()\nNow let’s retrieve partial information about the records we collected in one of our searches. This function takes a vector of unique IDs or just one id.\nBut, first, let’s learn the syntax of the entrez_summary() function.\nentrez_summary(db=\"<database name>\", id=< >)\nThe entrez_summary() function takes 7 arguments but you don’t need to use them all. The required ones are db and id.\n\nList of arguments and its usage:\n\ndb, name of the database to search for\nid, unique ID(s) for records in database\nweb_history, stored article/object ids in NCBI server\n\n\nEXAMPLES:\n\n#Rentrez summary function to get publication information\n#In this command we are giving a list of ids by using pcos_pm$ids. The $ operator extracts a subset of a data object in R.  \nsummary_pcos_pm <- entrez_summary(db=\"pubmed\", id=pcos_pm$ids)\n\nWhat does the entrez_summary() function RETURNS?\nThis function returns an NCBI API object called esummary, which means a list of items for multiple or single records. The elements return behave like a list so you can use $ to call any item.\nFor the entrez_summary() function, Rentrez has created a function that allows you to extract information from each metadata field avoiding the challenges that come with navigating an XML document.\n\n\nextract_from_esummary()\nThis function helps you navigate through an XMLInternalDocument and extract elements from a list of esummary records.\nBut, first and let’s learn the syntax of the extract_from_esummary() function.\nextract_from_esummary(esummaries, elements, simplify = TRUE)\nThe extract_from_summary() function takes 3 arguments but you don’t need to use them all. The required ones are esummary and elements.\n\nList of arguments and its usage:\n\nesumaries, either an esummary or an esummary_list (as returned by entrez_summary)\nelements, unique ID(s) for records in database\nsimplify, if possible return a vector\n\n\nEXAMPLE:\n\n# If you have been performing searches in PubMed, you can use the following coding lines as a guide.\n\nuids <- extract_from_esummary(summary_pcos_pm,\"uid\")\nauthors <- extract_from_esummary(summary_pcos_pm,\"authors\")[\"name\",]\n\nWhat does the extract_from_esummary() function RETURNS?\nThis function returns a list or vector containing information on the requested item.\n\n\nentrez_fetch()\nAnother way to get records from the NBCI API is by using the entrez_fetch() function. In some cases, entrez_fetch(), will retrieve a complete bibliographic record of the article or data object. Another difference between entrez_summary and entrez_fetch is in the way both functions arrange the data in RStudio. entrez_summary() in most of the cases will return a data frame with elements that behave as lists, while entrez_fetch() will return an XML Document.\nEXAMPLE:\n\nfetch <- entrez_fetch(db= \"pubmed\", id = pcos_pm$ids, rettype = \"xml\")"
  },
  {
    "objectID": "Week05/week05_v2_lesson.html#contrasting-ncbi-databases",
    "href": "Week05/week05_v2_lesson.html#contrasting-ncbi-databases",
    "title": "R Community of Practice Week 5",
    "section": "Contrasting NCBI Databases",
    "text": "Contrasting NCBI Databases\n\nentrez_global_query()\nThe entrez_global_query() function allows you to search a term on all NCBI Entrez Databases.\nThe syntax for this function is\nentrez_global_query(term= \"search term\", config = NULL, ...)\nAs you can see the function takes config= NULL as an argument, but we are not going to use that in this tutorial.\nThe argument config means the type of connection that you are requesting from the API, this could be GET or POST. In the NCBI API context if you are performing big data requests they recommend you to use a combination of web_history and config = POST arguments to not saturate their servers.\nLet’s test this function and see what it returns.\nEXAMPLE:\n\nglobal_query <- (\"PCOS\")\nall_databases <- entrez_global_query(global_query)\n# Lets view the results\nall_databases\n\n         pubmed             pmc            mesh           books    pubmedhealth \n          15279           18135               1             474              NA \n           omim      ncbisearch         nuccore          nucgss          nucest \n             22               0          104856               0               0 \n        protein          genome       structure        taxonomy             snp \n          12312              72               4               0               0 \n          dbvar            gene             sra      biosystems         unigene \n              0             617            3186              NA               0 \n            cdd           clone          popset     geoprofiles             gds \n              3               0               3          373883             960 \n     homologene      pccompound     pcsubstance         pcassay      nlmcatalog \n              0               0               5              63              33 \n          probe             gap proteinclusters      bioproject       biosample \n              0              53               0             196            4180 \n biocollections \n              0 \n\n\nWhat does the entrez_global_query() function RETURNS?\nThis function returns a named vector with counts for each database. This means a list of totals of articles found related to your search term for each database.\nAnother function that allows you to contrast searches within the NBCI databases is the entrez_links() function.\n\n\nentrez_links()\nThe entrez_link() function allows you to get links to related records from an NCBI database. This function uses a unique identifier or a set of unique identifiers to search related articles in other NCBI databases.\nLet’s have a look at the syntax of this function.\nentrez_link(dbfrom = \"database name\" , web_history = \"\" , id = \"\" , db = \"database name\", cmd = \"\", by_id = FALSE, config = \"\")\n\nLet’s have a look at the arguments required for this function.\n\ndbfrom, name of database from which the Id(s) originate\nweb_history, stored article/object ids in NCBI servers\nid, vector with unique ID(s) for records in database db\ndb, name of the database to search for links\ncmd, select an option from a defined list: neighbor, neighbor_score, neighbor_hsitory, acheck, ncheck, lcheck, llinks, llinkslib, prlinks\nby_id, if FALSE (default) return a single elink objects containing links for all of the provided ids. Alternatively, if TRUE return a list of elink objects, one for each ID in id.\nconfig, configuration options passed to httr::GET\n\n\nLet’s test this variable!\nEXAMPLE:\nLet’s select an article that is related to two characteristics of PCOS, Insulin Resistance, and Metabolic Syndrome.\nOne option can be:\nBrown, Audrey E, and Mark Walker. “Genetics of Insulin Resistance and the Metabolic Syndrome.” Current cardiology reports vol. 18,8 (2016): 75. doi:10.1007/s11886-016-0755-4\n\npcos_links <-entrez_link(dbfrom=\"pubmed\", id=\"10.1007/s11886-016-0755-4\", db= \"all\")\npcos_links$links\n\nelink result with information from 20 databases:\n [1] pubmed_bioproject          pubmed_gds                \n [3] pubmed_pmc_refs            pubmed_pubmed             \n [5] pubmed_pubmed_alsoviewed   pubmed_pubmed_citedin     \n [7] pubmed_pubmed_combined     pubmed_pubmed_five        \n [9] pubmed_pubmed_refs         pubmed_pubmed_reviews     \n[11] pubmed_pubmed_reviews_five pubmed_snp                \n[13] pubmed_sra                 pubmed_books_refs         \n[15] pubmed_mesh_major          pubmed_pccompound         \n[17] pubmed_pccompound_mesh     pubmed_pcsubstance        \n[19] pubmed_taxonomy_entrez     pubmed_taxonomy_mesh      \n\n\nOur results shows that there are related articles in databases such as the SRA, SNP, and others.\nNow searching the titles for articles that cited the our initial selected article.\n\nsummary_pcos_citedin <- entrez_summary(db=\"pubmed\", id=pcos_links$links$pubmed_pubmed_citedin, rettype = \"xml\")\nsummary_pcos_citedin\n\nList of  73 esummary records. First record:\n\n $`37287978`\nesummary result with 42 items:\n [1] uid               pubdate           epubdate          source           \n [5] authors           lastauthor        title             sorttitle        \n [9] volume            issue             pages             lang             \n[13] nlmuniqueid       issn              essn              pubtype          \n[17] recordstatus      pubstatus         articleids        history          \n[21] references        attributes        pmcrefcount       fulljournalname  \n[25] elocationid       doctype           srccontriblist    booktitle        \n[29] medium            edition           publisherlocation publishername    \n[33] srcdate           reportnumber      availablefromurl  locationlabel    \n[37] doccontriblist    docdate           bookname          chapter          \n[41] sortpubdate       sortfirstauthor  \n\n\nNow searching for matches in the SRA Database.\n\nsummary_pcos_sra <- entrez_summary(db=\"sra\", id=pcos_links$links$pubmed_sra, rettype = \"xml\")\nsummary_pcos_sra\n\nList of  11 esummary records. First record:\n\n $`11727567`\nesummary result with 5 items:\n[1] uid        expxml     runs       extlinks   createdate\n\n\nNow searching for matches in the SNP Database\n\nsummary_pcos_snp <- entrez_summary(db=\"snp\", id=pcos_links$links$pubmed_snp, rettype = \"xml\")\nsummary_pcos_snp\n\nList of  3 esummary records. First record:\n\n $`76763715`\nesummary result with 31 items:\n [1] uid                   snp_id                allele_origin        \n [4] global_mafs           global_population     global_samplesize    \n [7] suspected             clinical_significance genes                \n[10] acc                   chr                   handle               \n[13] spdi                  fxn_class             validated            \n[16] docsum                tax_id                orig_build           \n[19] upd_build             createdate            updatedate           \n[22] ss                    allele                snp_class            \n[25] chrpos                chrpos_prev_assm      text                 \n[28] snp_id_sort           clinical_sort         cited_sort           \n[31] chrpos_sort          \n\n\nWhat does the entrez_link function returns?\nThis function returns an NCBI API object called, “elink”, which is a list of ids by a database."
  },
  {
    "objectID": "Week05/week05_v2_lesson.html#rentrez-web_history",
    "href": "Week05/week05_v2_lesson.html#rentrez-web_history",
    "title": "R Community of Practice Week 5",
    "section": "Rentrez web_history",
    "text": "Rentrez web_history\nTo perform big data requests, Rentrez offers the use_history boolean argument. When you enable history in a search, the object returned includes a web_history object that can be used to paginate across results. Without the web_history object results are limited to the first N results set using retmax.\nWhen you enable use_history in a search, the search object includes a small sample of ids. However, using the web_history object in combination of the retmax and retstart you will be able to obtain far more records than you would obtain from a search without web_history.\nCurrently, pagination is limited to 10,000 records without an API key."
  },
  {
    "objectID": "Week05/week05_v2_lesson.html#example",
    "href": "Week05/week05_v2_lesson.html#example",
    "title": "R Community of Practice Week 5",
    "section": "Example",
    "text": "Example\n\nScenario\nI’m interested in gathering a list of genes related to PCOS publications within the years 2021 to 2024.\n\n\nSetting my search\nIn this instance I’m enabling use history because eventually I want to examine cross-references in between PubMed and Gene.\n\nsearch <- entrez_search(db=\"pubmed\", term=\"pcos AND 2021:2024[PDAT]\", use_history= TRUE)\n\n\n\nObtained Linked Gene IDs from the “gene” NCBI Database\n\nall_pubmed_gene_link = c() # Empty list to accumulate results\npage_size <- 100 # retmax and page_size needs to be the same number\nmax_limit <- 1000 # Can't be higher that 10000 due to API limits\nmax_results <- min(search$count,max_limit) # Set max result number for efficiency\n\nfor(page_start in seq(1,max_results,page_size)){\n  links <- entrez_link(\n    dbfrom=\"pubmed\", db=\"gene\",\n    web_history = search$web_history, \n    by_id = FALSE, # Return a unified list of genes, instead of genes per PubMed publication\n    retmax = page_size, \n    retstart = page_start # page_start controls pagination\n  )\n# Add results to list\n  all_pubmed_gene_link <- c(\n    all_pubmed_gene_link, \n    links$links$pubmed_gene\n  ) \n}\n\n\n\nWhy do we used a for-loop?\nIn this instance a for-loop was needed to iteratively query the API. If API queries are performed in bulk, there is a higher risk of hitting the API’s rate limit. Rentrez offers internal functionality that, in theory, should protect the code from getting blocked by the API.\n\n\nDisplay first results\n\nhead(all_pubmed_gene_link)\n\n[1] \"14910\" \"7157\"  \"1956\"  \"7124\"  \"3569\"  \"4524\""
  },
  {
    "objectID": "Week05/week05_v2_slides.html",
    "href": "Week05/week05_v2_slides.html",
    "title": "Accessing NCBI data with the Rentrez package",
    "section": "",
    "text": "Our goals for today are:\n\nBecome familiar Rentrez.\nLearn basic search functions.\nExtract information from the esumaries.\n\nChallenges of Working with Data an Unknown Source\n\nThe data may not arranged in a standardized format (BIBFRAME, MARC, METS, MODS, EAD…)\nThe source documentation may be incomplete, or may not answer our questions.\nNot knowing what extra steps we may need to take to clean the data, so it can be usable."
  },
  {
    "objectID": "Week05/week05_v2_slides.html#the-data",
    "href": "Week05/week05_v2_slides.html#the-data",
    "title": "Accessing NCBI data with the Rentrez package",
    "section": "The Data",
    "text": "The Data\n\nScenario: Today our data comes from PubMed, a National Center for Biotechnology Information (NCBI) database. Our data outputs, will contain bibliographic information about our search query. We want to accomplish the following tasks:\n\nDownload Rentrez.\nPerform simple and boolean searches.\nCreate a graph using your search results."
  },
  {
    "objectID": "Week05/week05_v2_slides.html#what-is-rentrez",
    "href": "Week05/week05_v2_slides.html#what-is-rentrez",
    "title": "Accessing NCBI data with the Rentrez package",
    "section": "What is Rentrez?",
    "text": "What is Rentrez?\nRentrez is an R interface that allows its users to interact with NCBI API.\nWith Rentrez, you do not need to use any additional program or terminal to access NCBI Data.\nThis means that you can request data from multiple databases (PubMed, SNP, Clinvar, SRA, Gene, and others) in the same RStudio Session."
  },
  {
    "objectID": "Week05/week05_v2_slides.html#install-and-load-rentrez",
    "href": "Week05/week05_v2_slides.html#install-and-load-rentrez",
    "title": "Accessing NCBI data with the Rentrez package",
    "section": "Install and Load Rentrez",
    "text": "Install and Load Rentrez\nNow, remember that you need to install any new package that you want to use in RStudio. Also, once you have the package you need to load it.\n\n#install.packages('rentrez')\nlibrary(rentrez)"
  },
  {
    "objectID": "Week05/week05_v2_slides.html#rentrez-functions",
    "href": "Week05/week05_v2_slides.html#rentrez-functions",
    "title": "Accessing NCBI data with the Rentrez package",
    "section": "Rentrez Functions",
    "text": "Rentrez Functions\n\nThe functions listed below help you learn a little bit more about Rentrez and NCBI Databases.\n\n\n\n\n\n\n\nFunction\nUsage\n\n\n\n\nentrez_dbs()\nList of Entrez Databases\n\n\nentrez_db_summary()\nBrief description of what the database is\n\n\nentrez_db_searchable()\nSet of search fields that can used with this database"
  },
  {
    "objectID": "Week05/week05_v2_slides.html#performing-searches-with-rentrez",
    "href": "Week05/week05_v2_slides.html#performing-searches-with-rentrez",
    "title": "Accessing NCBI data with the Rentrez package",
    "section": "Performing searches with Rentrez",
    "text": "Performing searches with Rentrez\n\nThe functions listed below help you perform searches to a NCBI Database.\n\n\n\n\n\n\n\nFunction\nUsage\n\n\n\n\nentrez_search()\nAllows you to perform simple or boolean searches\n\n\nentrez_summary()\nAllows you to retrieve basic information about the records found\n\n\nextract_from_esummary()\nExtract elements from a list of esummary records"
  },
  {
    "objectID": "Week05/week05_v2_slides.html#entrez_search",
    "href": "Week05/week05_v2_slides.html#entrez_search",
    "title": "Accessing NCBI data with the Rentrez package",
    "section": "entrez_search()",
    "text": "entrez_search()\nSimilar to PubMed, Rentrez allows you to perform simple or boolean searches using the same structure that you would use in the PubMed search bar. The allowed boolean terms are AND, OR, and NOT.\n\nFirst, let’s learn the syntax for a simple and a boolean search:\n\nSimple Search:\n\npcos_pm <- entrez_search(db=\"pubmed\", term = \"pcos[all]\")\n\nBoolean search:\n\npcos_ir_pm <- entrez_search(db=\"pubmed\", term= \"pcos[all] AND insulin resistance[all]\")"
  },
  {
    "objectID": "Week05/week05_v2_slides.html#entrez_summary",
    "href": "Week05/week05_v2_slides.html#entrez_summary",
    "title": "Accessing NCBI data with the Rentrez package",
    "section": "entrez_summary()",
    "text": "entrez_summary()\nNow let’s retrieve basic information about the records we collected in one of our searches. But, first, let’s learn the syntax of the entrez_summary() function.\n\nsummary_pcos_pm <- entrez_summary(db=\"pubmed\", id=pcos_pm$ids)"
  },
  {
    "objectID": "Week05/week05_v2_slides.html#extract_from_esummary",
    "href": "Week05/week05_v2_slides.html#extract_from_esummary",
    "title": "Accessing NCBI data with the Rentrez package",
    "section": "extract_from_esummary()",
    "text": "extract_from_esummary()\nThis function helps you navigate through an XMLInternalDocument and extract elements from a list of esummary records. But, first, let’s learn the syntax of the extract_from_esummary() function.\n\n\nuids <- extract_from_esummary(summary_pcos_pm,\"uid\")\nauthors <- extract_from_esummary(summary_pcos_pm,\"authors\")[\"name\",]\npubdate <- extract_from_esummary(summary_pcos_pm,\"pubdate\")"
  },
  {
    "objectID": "Week05/week05_v2_slides.html#exercise-lets-practice",
    "href": "Week05/week05_v2_slides.html#exercise-lets-practice",
    "title": "Accessing NCBI data with the Rentrez package",
    "section": "Exercise: Let’s practice!",
    "text": "Exercise: Let’s practice!\nNow lets perform our own searches!\nWe are going to use the Rentrez functions to extract data from an NCBI database.\nOur objective is to:\n\nBuild your query: Identify your search terms, adequate database, search fields and perform the search using rentrez.\nGet article/object summaries.\nSelect the values that you would like to save (for example author, title, source).\nCreate a graph that represents the results of your search."
  },
  {
    "objectID": "Week05/week05_v2_slides.html#step-1",
    "href": "Week05/week05_v2_slides.html#step-1",
    "title": "Accessing NCBI data with the Rentrez package",
    "section": "STEP #1",
    "text": "STEP #1\nBuild your query: Identify your search terms, adequate database, and search fields and perform the search using Rentrez.\n\n# Im interested in seeing Dr. Kristen Stafford Publications, Associate Professor of Epidemiology and Deputy Director - Center for International Health, Education, and Biosecurity\n\nsearch <- entrez_search(db=\"pubmed\", term = \"Kristen A. Stafford[AUTH]\",retmax=100)\nsearch\n\nEntrez search result with 51 hits (object contains 51 IDs and no web_history object)\n Search term (as translated):  stafford, kristen a[Author]"
  },
  {
    "objectID": "Week05/week05_v2_slides.html#step-2",
    "href": "Week05/week05_v2_slides.html#step-2",
    "title": "Accessing NCBI data with the Rentrez package",
    "section": "STEP #2",
    "text": "STEP #2\nGet article summaries\n\nsummary <- entrez_summary(db=\"pubmed\", id=search$ids)\nsummary\n\nList of  51 esummary records. First record:\n\n $`37247622`\nesummary result with 42 items:\n [1] uid               pubdate           epubdate          source           \n [5] authors           lastauthor        title             sorttitle        \n [9] volume            issue             pages             lang             \n[13] nlmuniqueid       issn              essn              pubtype          \n[17] recordstatus      pubstatus         articleids        history          \n[21] references        attributes        pmcrefcount       fulljournalname  \n[25] elocationid       doctype           srccontriblist    booktitle        \n[29] medium            edition           publisherlocation publishername    \n[33] srcdate           reportnumber      availablefromurl  locationlabel    \n[37] doccontriblist    docdate           bookname          chapter          \n[41] sortpubdate       sortfirstauthor"
  },
  {
    "objectID": "Week05/week05_v2_slides.html#step-3",
    "href": "Week05/week05_v2_slides.html#step-3",
    "title": "Accessing NCBI data with the Rentrez package",
    "section": "STEP #3",
    "text": "STEP #3\nSelect the values that you would like to save (for example author, title, source)\n\n# I want to know how many publications she has and in what journal she publishes the most. \n\nlibrary(tidyverse)\n\npubdate <- extract_from_esummary(summary,\"pubdate\") %>%\n  substr(start= 1, stop=4)\nsource <- extract_from_esummary(summary,\"source\")"
  },
  {
    "objectID": "Week05/week05_v2_slides.html#step-4",
    "href": "Week05/week05_v2_slides.html#step-4",
    "title": "Accessing NCBI data with the Rentrez package",
    "section": "STEP #4",
    "text": "STEP #4\nCreate a graph that represents the results of your search.\n\nggplot(mapping = aes(x=source)) + \n  geom_bar() +\n  theme(axis.text.x = element_text(angle = 90)) + # To rotate journals names\n  labs(title = \"Kristen's Stafford Publications per journal\", # Set up graph title and labels\n       x=\"Journal\", y= \"Amount\")\n\n\n\n\n\n\nggplot(mapping = aes(x=pubdate)) + \n  geom_bar() +\n  theme(axis.text.x = element_text(angle = 90)) +\n   labs(title = \"Kristen's Stafford Publications per year\", # Set up graph title and labels\n       x=\"Year\", y= \"Amount\")"
  }
]