---
title: "R Community of Practice Week 5"
subtitle: "Creating slide shows using Quarto"
title-block-banner: white
title-block-banner-color: black
navbar:
    page-navigation: true
format: 
  html:
    embed-resources: true
toc: true
editor: source
css: ../styles.css
---
## Introduction

This week we're going to use RStudio in a way we haven't used before.
We will be using RStudio, to format and generate a slide show.

This lesson objectives are: 

1. Introduce participants to Quarto, its purpose, features and benefits.
2. Get participants acquainted to Quarto's document structure. 
3. Practice structuring documents using RMarkdown.

## The Data

For this week we are not going to work with data, but we will be referencing content from the last 5 weeks. 

:::{.callout-note}
We suggest you download a pre-formatted .qmd file published in our [OSF](https://osf.io/fsg4w/) with the name `pre-formatted.qmd` under week 6.
:::

## What is Quarto?

Quarto is a publishing tool for creating interactive and dynamic documents. One of the goals that Quarto has is "to make the process of creating and collaborating on scientific and technical documents dramatically better."

With Quarto, you can create reproducible articles, presentation, websites, blogs, and books in HTML, PDF, MS Word, ePub, and more. Quarto supports reproducible research by ensuring document format standardization across multiple files. 

In the same RStudio Session, you can combine data analysis and data visualization, to support your article, presentation, website or other. In the same `.qmd` file you can mix images, video, data and code, to produce a document.  

In fact, the materials generated in this course, its webpages and slides, are structured as a collection of Quarto [documents](https://github.com/hshsl-training/RCOP/blob/main/Week04/week04_lesson.qmd). We uploaded all of our code and `.qmd` files to a website called GitHub, and this website does the rendering of the materials for us. 

## Components of a .qmd file
 
The structure of a `.qmd` file is simple. 

Every `.qmd` presentation starts with the following lines:

```yaml
---
title: "This is a test"
author: "Irmarie"
format: revealjs
---
```
Anything that goes inside of the hyphens is considered a YAML text. 
And anything that goes after the last trio of hyphens, can be a combination of R code chunks and RMarkdown, as shown in the image below. 

![](qmd_example_rstudio.png)

**Different format options for different types of documents**

Depending of the type of document your YAML configurations may look different. For example, in the image shown above, the YAML configuration is setting up an website.



## What is YAML and RMarkdown?

### YAML

[YAML](https://yaml.org/) is a human-friendly data serialization language for all programming languages. YAML can be use to set up configurations in a file or website.

In our context, we will be using YAML as a configuration language to help us style our Quarto presentation. YAML configuration in Quarto can offer us many options to customize our presentation, from the color schema of our presentation (`theme`) to how we would like to display code chunks and graphics in a presentation (`code-fold`, `code-overflow`, etc). 

::: {.callout-tip}
## Quarto Documentation
To learn more about the types of documents that Quarto can generate, you can visit its [documentation website](https://quarto.org/docs/presentations/) . 
:::

Let's take a look to the YAML example below. 

```yaml
---
title: "Accessing NCBI data with the Rentrez package"
subtitle: "R Community of Practice June 15 - July 20"
author: "Irmarie Fraticelli-Rodriguez"
date: "07/13/2023"
footer: <https://www2.hshsl.umaryland.edu/cdabs/>
format:
  revealjs:
    theme: default
    slide-number: true
    smaller: true
    scrollable: true
    preview-links: true
    code-fold: show
    code-overflow: wrap
    logo: rcop_hex_logo.png
---
```

In this YAML example, you can see that indentation is very important. Anything that sets up the metadata of the document such as `title`, `subtitle`, `author`, `date`, `footer` does not go indented. But anything that sets up the type of document (pptx, revealjs, html, etc.) needs to be indented. Any specific stylistic choice, such as `theme`,`slide-number`,`preview-link`,`code-overflow`, and the others, goes nested under format of document selected.


![](indentation.jpg)

:::{.callout-note}
**What is the format revealjs?** Revealjs is an open source HTML presentation framework, this format uses a web browser to create interactive presentations.  One of the benefits of using revealjs is that you avoid any complication that may come with using the Power Point interface, and you ensure that any tool that you use in your document is open-source. Also, once the presentation is rendered, you can print it into a pdf. 

**Want to learn more about revealjs styling options?**

Take a look at the revealjs and Quarto documentation.

 + [Styling Documentation, Quarto + revealjs ](https://quarto.org/docs/reference/formats/presentations/revealjs.html)
 + [Theme Documentation, revealjs](https://revealjs.com/themes/)
 + [Print to PDF, revealjs](https://quarto.org/docs/presentations/revealjs/presenting.html#print-to-pdf)
 + [revealjs Website](https://revealjs.com/)

:::

### RMarkdown

RMarkdown is an extension of Markdown, with this language you can combine R results from data analysis with plain text producing a formatted and reproducible document.

Let's take a look at different 

#### Headings

Headings represent a way to arrange content in a markdown document. 
They represent different levels of hierarchy and help readers understand the document's outline. Markdown headings are created using hash `#` symbols at the beginning of a line, followed by a space and text.

It is recommended to leave a blank line before and after headings. 

---

:::: {.columns}

::: {.column width="40%"}
##### Code
```
# Header 1

## Header 2

### Header 3

#### Header 4

##### Header 5

###### Header 6
```
:::

::: {.column width="40%"}
##### Render

# Header 1

## Header 2

### Header 3

#### Header 4

##### Header 5

###### Header 6
:::

::::

---

</br>

##### **How headings work in Quarto Presentations?**

You can create slides in Quarto using the `##` symbol. 
The `##` symbol can be accompanied by text, that when rendered represents the title of the slide.

---

:::: {.columns}

::: {.column width="40%"}
##### Code
```{=html}
## What is Rentrez?
</br></br>
`Rentrez` is an R interface that allows its users to interact with NCBI API.
</br></br>
With `Rentrez`, you do not need to use any additional program or terminal to access NCBI Data.
</br></br>
This means that you can request data from multiple databases (PubMed, SNP, Clinvar, SRA, Gene, and others) in the same RStudio Session.
```
:::

::: {.column width="40%"}
##### Render

## What is Rentrez? 

`Rentrez` is an R interface that allows its users to interact with NCBI API.

With `Rentrez`, you do not need to use any additional program or terminal to access NCBI Data. 

This means that you can request data from multiple databases (PubMed, SNP, Clinvar, SRA, Gene, and others) in the same RStudio Session.
:::

::::

---

##### **Slides without title**

Another way to create titles is by using three hyphens `---`. This method is used if you do not have a title for your slide. 

Below an example from the [Quarto Website](https://quarto.org/docs/presentations/index.html#creating-slides):

---

:::: {.columns}

::: {.column width="30%"}
##### Code
```
---
title: "Habits"
author: "John Doe"
format: revealjs
---

- Turn off alarm
- Get out of bed

---

- Get in bed
- Count sheep
```
:::

::: {.column width="65%"}
##### Render

![Rendered Slides: First with title and two without title](no_title.png)

:::
::::

---

#### Paragraphs and Inline Formatting

Paragraphs in markdown displays as you would normally see them in a text editor.
By using markdown and Quarto, you can comment your code without the need of using the # symbol.

To split text in separate paragraphs you need to use two consecutive newlines. 

---

##### Single newline

:::: {.columns}

::: {.column width="40%"}
###### Code

```
Paragraph 1
Paragraph 2
```
:::

::: {.column width="40%"}
###### Render

Paragraph 1
Paragraph 2
:::
::::


##### Two newlines

:::: {.columns}

::: {.column width="40%"}
###### Code

```
Paragraph 1

Paragraph 2
```
:::

::: {.column width="40%"}
###### Render

Paragraph 1

Paragraph 2
:::
::::

---

The example bellow contains multiple inline formatting options that you can do with markdown, such as: 

* italic letters `*txt*`
* bold letters `**txt**`
* backtick ``` ` ` ```
* links`[text](url)`

:::: {.columns}

::: {.column width="40%"}

##### Code
```{=html}
*entrez_search()*
</br></br>
Similar to PubMed, `Rentrez` allows you to perform simple or boolean searches using the same structure that you would use in the PubMed search bar. The allowed boolean terms are **AND, OR, and NOT**.
</br></br>
First, let's learn the syntax for a simple and a boolean search:
</br></br>
**Simple Search:**
</br></br>
To know more about this fuction, you can visit this [tutorial](https://cran.r-project.org/web/packages/rentrez/ vignettes/rentrez_tutorial.html)
```

:::

::: {.column width="60%"}

##### Render

*entrez_search()*

Similar to PubMed, `Rentrez` allows you to perform simple or boolean searches using the same structure that you would use in the PubMed search bar. The allowed boolean terms are **AND, OR, and NOT**.

<br/>

First, let's learn the syntax for a simple and a boolean search:

<br/>

**Simple Search:**

To know more about this function, you can visit this [tutorial](https://cran.r-project.org/web/packages/rentrez/vignettes/rentrez_tutorial.html).

:::

::::


#### Ordered Lists

Ordered lists can be created in markdown very easily as shown in the example below. 

It is important to insert a newline before the list so it can get render appropiatedly. 

---

:::: {.columns}

::: {.column width="40%"}
##### Code
```
In the morning:

1. Wake Up
2. Shut Alarm Off
3. Brush teeth
4. Take Bath
5. Get Dressed
6. Feed pets
7. Grab Essentials
8. Leave for work
```
:::


::: {.column width="40%"}
##### Render
In the morning:

1. Wake Up
2. Shut Alarm Off
3. Brush teeth
4. Take Bath
5. Get Dressed
6. Feed pets
7. Grab Essentials
8. Leave for work
:::

::::

::: {.callout-tip}
## Markdown Ordered List Trick

Sometimes ordered lists can get very large and keeping an eye to the number order can be a daunting task. 

If you use the same number consistently across the list, markdown will also understand that it is an ordered list. 



:::: {.columns}

::: {.column width="40%"}
##### Code
```
In the morning:

1. Wake Up
1. Shut Alarm Off
1. Brush teeth
```
:::


::: {.column width="40%"}
##### Render
In the morning:

1. Wake Up
1. Shut Alarm Off
1. Brush teeth
:::

::::

:::

---

#### Un-ordered (Bullet) Lists

To create unrecorded lists you need to use the `*`, `+` or `-` symbol. It is recommended to maintain consistency across the document. If you selected the `+` to create un-ordered lists, try to maintain that across the document as much as possible. 

Also, it is important to create a newline before the list so it can get render appropiatedly. 

---

:::: {.columns}

::: {.column width="40%"}
##### Code
```
My pets:

* Tomasina
* Cometa
```
:::

::: {.column width="40%"}
##### Render
My pets:

* Tomasina
* Cometa
:::

::::

---

#### Images


:::: {.columns}

::: {.column width="40%"}
##### Code

```
Image from directory path
![](tomasina.jpeg)
```
:::

::: {.column width="40%"}
##### Render

Image from directory path
![](tomasina.jpeg)
:::
::::

:::: {.columns}

::: {.column width="40%"}
```
Image from URL
![](https://catamazing.com/cdn/
shop/files/catshark.jpg?
v=1649869148)
```
:::

::: {.column width="40%"}
Image from URL
![](https://catamazing.com/cdn/shop/files/catshark.jpg?v=1649869148)
:::
::::

#### Integrating code and graphs in your document

:::{.callout-note}
Markdown allows you to use multiple formatting elements in a plan text document. Since it can be used to write any type of document, it includes multiple functions that you can explore in this [website](https://www.markdownguide.org/cheat-sheet/).
:::




## Exercise: Let's Practice

**Scenario**
Your supervisor is asking you to create a slide show about the the skills you have learn for the last few weeks. In this slide show, you need to answer the following questions:

* Question 1?
* Question 2?
* Question 3?

To accomplish this request, you will need to complete the following tasks:

 1. Create a .qmd file.
 2. Structure your presentation using RMarkdown
 3. Create the requested content
 4. Stylish your presentation using YAML

